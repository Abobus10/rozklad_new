# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫—É Telegram-–±–æ—Ç–∞ —Ä–æ–∑–∫–ª–∞–¥—É.

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å—É—á–∞—Å–Ω—É –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É –∑ —Ç–∏–ø—ñ–∑–∞—Ü—ñ—î—é, –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é –¥–∞–Ω–∏—Ö,
—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º —ñ –≥–∞—Ä–Ω–æ—é –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—î—é –∫–æ–¥—É.
"""

import asyncio
import signal
import sys
from datetime import time
from typing import Optional

import pytz
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
)

from config import config, KYIV_TZ
from logger_config import main_logger, LoggerMixin
from data_manager import data_manager
from notifications import send_daily_reminders, send_morning_schedule, send_next_lesson_notifications
from handlers import commands, callbacks, conversations


class TelegramBot(LoggerMixin):
    """–û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å Telegram –±–æ—Ç–∞ –∑ —Å—É—á–∞—Å–Ω–æ—é –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é."""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞."""
        self.application: Optional[Application] = None
        self._shutdown_requested = False
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        self.logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def _signal_handler(self, signum: int, frame) -> None:
        """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏."""
        self.logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}. –ü–æ—á–∏–Ω–∞—é graceful shutdown...")
        self._shutdown_requested = True
    
    async def _error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫.
        
        Args:
            update: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        """
        error_msg = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {context.error}"
        
        if update:
            if hasattr(update, 'effective_user') and update.effective_user:
                error_msg += f" | –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {update.effective_user.id}"
            if hasattr(update, 'effective_chat') and update.effective_chat:
                error_msg += f" | –ß–∞—Ç: {update.effective_chat.id}"
        
        self.logger.error(error_msg, exc_info=context.error)
        
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        if context.error and "critical" in str(context.error).lower():
            await self._notify_admins_about_error(context.error)
    
    async def _notify_admins_about_error(self, error: Exception) -> None:
        """–ü–æ–≤—ñ–¥–æ–º–ª—è—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø—Ä–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏."""
        try:
            for admin_id in config.admin_ids:
                await self.application.bot.send_message(
                    chat_id=admin_id,
                    text=f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ:\n{error}",
                    parse_mode="HTML"
                )
        except Exception as e:
            self.logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: {e}")
    
    def _create_conversation_handlers(self) -> list[ConversationHandler]:
        """
        –°—Ç–≤–æ—Ä—é—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö ConversationHandler
        """
        handlers = []
        
        # –î—ñ–∞–ª–æ–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏
        conv_handler_group = ConversationHandler(
            entry_points=[
                CommandHandler("setgroup", conversations.set_group_start),
                CallbackQueryHandler(conversations.set_group_start, pattern="^quick_setgroup$")
            ],
            states={
                conversations.CHOOSING_GROUP: [
                    CallbackQueryHandler(conversations.group_chosen, pattern="^conv_group_"),
                    CallbackQueryHandler(conversations.cancel_conversation, pattern="^conv_cancel$")
                ]
            },
            fallbacks=[CommandHandler("cancel", conversations.cancel_conversation)],
            name="set_group_conversation"
        )
        handlers.append(conv_handler_group)
        
        # –î—ñ–∞–ª–æ–≥ –≥—Ä–∏ "–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
        conv_handler_game = ConversationHandler(
            entry_points=[
                CommandHandler("game", conversations.game_start),
                CallbackQueryHandler(conversations.game_start, pattern="^quick_game$")
            ],
            states={
                conversations.GUESSING_NUMBER: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, conversations.game_guess),
                    CallbackQueryHandler(conversations.cancel_conversation, pattern="^conv_cancel$")
                ]
            },
            fallbacks=[CommandHandler("cancel", conversations.cancel_conversation)],
            name="game_conversation"
        )
        handlers.append(conv_handler_game)
        
        # –î—ñ–∞–ª–æ–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
        conv_handler_reminder = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(conversations.set_reminder_time_start, pattern="^set_reminder_time$")
            ],
            states={
                conversations.SETTING_REMINDER_TIME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, conversations.reminder_time_received),
                    CallbackQueryHandler(conversations.cancel_conversation, pattern="^conv_cancel$")
                ]
            },
            fallbacks=[CommandHandler("cancel", conversations.cancel_conversation)],
            name="reminder_time_conversation"
        )
        handlers.append(conv_handler_reminder)
        
        self.logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ {len(handlers)} –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥—ñ–∞–ª–æ–≥—ñ–≤")
        return handlers
    
    def _register_handlers(self) -> None:
        """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
        
        # –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.application.add_handler(CommandHandler("admin", commands.admin_command))
        self.application.add_handler(CommandHandler("stats", commands.stats_command))
        self.application.add_handler(CommandHandler("broadcast", commands.broadcast_command))
        self.application.add_handler(CommandHandler("test_schedule", commands.test_schedule_command))
        
        # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.application.add_handler(CommandHandler("start", commands.start))
        self.application.add_handler(CommandHandler("help", commands.menu_command))  # –¥–æ–ø–æ–º–æ–≥–∞ = –º–µ–Ω—é
        self.application.add_handler(CommandHandler("menu", commands.menu_command))
        
        # –ö–æ–º–∞–Ω–¥–∏ —Ä–æ–∑–∫–ª–∞–¥—É
        self.application.add_handler(CommandHandler("today", commands.today_command))
        self.application.add_handler(CommandHandler("tomorrow", commands.tomorrow_command))
        self.application.add_handler(CommandHandler("next", commands.next_lesson_command))
        self.application.add_handler(CommandHandler("schedule", commands.schedule_command))
        
        # –ö–æ–º–∞–Ω–¥–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å - –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ menu_command, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ
        self.application.add_handler(CommandHandler("reminders", commands.menu_command))
        self.application.add_handler(CommandHandler("me", commands.menu_command))
        self.application.add_handler(CommandHandler("week", commands.menu_command))
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ - –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ menu_command, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ  
        self.application.add_handler(CommandHandler("fact", commands.menu_command))
        self.application.add_handler(CommandHandler("setgroupschedule", commands.menu_command))
        self.application.add_handler(CommandHandler("groupinfo", commands.menu_command))
        
        # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤
        for handler in self._create_conversation_handlers():
            self.application.add_handler(handler)
        
        # –û–±—Ä–æ–±–Ω–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(callbacks.schedule_callback, pattern="^schedule_"))
        self.application.add_handler(CallbackQueryHandler(callbacks.reminder_callback, pattern="^(toggle_|disable_)"))
        self.application.add_handler(CallbackQueryHandler(callbacks.group_schedule_callback, pattern="^setgroup_"))
        self.application.add_handler(CallbackQueryHandler(callbacks.quick_action_callback, pattern="^quick_"))
        self.application.add_handler(CallbackQueryHandler(callbacks.menu_callback, pattern="^show_menu$"))
        
        # –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
        self.application.add_error_handler(self._error_handler)
        
        self.logger.info("–í—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")
    
    def _setup_scheduled_jobs(self) -> None:
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–∞–¥–∞—á—ñ."""
        job_queue = self.application.job_queue
        
        if not job_queue:
            self.logger.error("Job queue –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return
        
        # –†–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ —Ä–æ–∑–∫–ª–∞–¥—É (–ø–Ω-—Å–± –æ 7:00)
        morning_time = time(hour=7, minute=0, tzinfo=pytz.timezone(KYIV_TZ))
        job_queue.run_daily(
            callback=send_morning_schedule,
            time=morning_time,
            days=tuple(range(6)),  # –ø–Ω-—Å–±
            name="morning_schedule"
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å (—â–æ—Ö–≤–∏–ª–∏–Ω–∏)
        job_queue.run_repeating(
            callback=send_daily_reminders,
            interval=60,
            first=10,
            name="daily_reminders"
        )
        
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–∞—Ä—É (—â–æ—Ö–≤–∏–ª–∏–Ω–∏)
        job_queue.run_repeating(
            callback=send_next_lesson_notifications,
            interval=60,
            first=15,
            name="next_lesson_notifications"
        )
        
        self.logger.info("–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–∞–¥–∞—á—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞."""
        try:
            self.logger.info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Application...")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ Application –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
            builder = Application.builder()
            builder.token(config.telegram_token)
            builder.concurrent_updates(True)  # –í–∫–ª—é—á–∞—î–º–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É –æ–±—Ä–æ–±–∫—É
            builder.read_timeout(config.request_timeout)
            builder.write_timeout(config.request_timeout)
            
            self.application = builder.build()
            
            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
            self._register_handlers()
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–∞–¥–∞—á—ñ
            self._setup_scheduled_jobs()
            
            self.logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞—é polling...")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –∑ –ø—Ä–æ—Å—Ç–∏–º –ø—ñ–¥—Ö–æ–¥–æ–º –¥–ª—è Windows
            self.application.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}", exc_info=True)
            raise
    
    def stop(self) -> None:
        """–ó—É–ø–∏–Ω—è—î –±–æ—Ç–∞."""
        if self.application:
            self.logger.info("–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
            try:
                # –ü—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É –∑—É–ø–∏–Ω–∫–∞ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
                self.logger.info("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–∏–π")
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞: {e}")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É."""
    bot = TelegramBot()
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        user_count = data_manager.get_users_count()
        groups_count = data_manager.get_groups_count()
        
        main_logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {user_count}")
        main_logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≥—Ä—É–ø: {groups_count}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        bot.start()
        
    except KeyboardInterrupt:
        main_logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    except Exception as e:
        main_logger.critical(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        sys.exit(1)
    finally:
        bot.stop()
        main_logger.info("–î–æ–¥–∞—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1) 