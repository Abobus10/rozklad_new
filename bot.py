# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π, –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö,
—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ö–æ—Ä–æ—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∫–æ–¥–∞.
"""

import asyncio
import signal
import sys
from datetime import time
from typing import Optional

import pytz
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
)

from config import config, KYIV_TZ
from logger_config import main_logger, LoggerMixin
from data_manager import data_manager
from notifications import send_daily_reminders, send_morning_schedule, send_next_lesson_notifications
from handlers import commands, callbacks, conversations


class TelegramBot(LoggerMixin):
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        self.application: Optional[Application] = None
        self._shutdown_requested = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def _signal_handler(self, signum: int, frame) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."""
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ù–∞—á–∏–Ω–∞—é graceful shutdown...")
        self._shutdown_requested = True
    
    async def _error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫.
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}"
        
        if update:
            if hasattr(update, 'effective_user') and update.effective_user:
                error_msg += f" | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.id}"
            if hasattr(update, 'effective_chat') and update.effective_chat:
                error_msg += f" | –ß–∞—Ç: {update.effective_chat.id}"
        
        self.logger.error(error_msg, exc_info=context.error)
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        if context.error and "critical" in str(context.error).lower():
            await self._notify_admins_about_error(context.error)
    
    async def _notify_admins_about_error(self, error: Exception) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö."""
        try:
            for admin_id in config.admin_ids:
                await self.application.bot.send_message(
                    chat_id=admin_id,
                    text=f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n{error}",
                    parse_mode="HTML"
                )
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    
    def _create_conversation_handlers(self) -> list[ConversationHandler]:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö ConversationHandler
        """
        handlers = []
        
        # –î–∏–∞–ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–ø—ã
        conv_handler_group = ConversationHandler(
            entry_points=[
                CommandHandler("setgroup", conversations.set_group_start),
                CallbackQueryHandler(conversations.set_group_start, pattern="^quick_setgroup$")
            ],
            states={
                conversations.CHOOSING_GROUP: [
                    CallbackQueryHandler(conversations.group_chosen, pattern="^conv_group_"),
                    CallbackQueryHandler(conversations.cancel_conversation, pattern="^conv_cancel$")
                ]
            },
            fallbacks=[CommandHandler("cancel", conversations.cancel_conversation)],
            name="set_group_conversation"
        )
        handlers.append(conv_handler_group)
        
        # –î–∏–∞–ª–æ–≥ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
        conv_handler_game = ConversationHandler(
            entry_points=[
                CommandHandler("game", conversations.game_start),
                CallbackQueryHandler(conversations.game_start, pattern="^quick_game$")
            ],
            states={
                conversations.GUESSING_NUMBER: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, conversations.game_guess),
                    CallbackQueryHandler(conversations.cancel_conversation, pattern="^conv_cancel$")
                ]
            },
            fallbacks=[CommandHandler("cancel", conversations.cancel_conversation)],
            name="game_conversation"
        )
        handlers.append(conv_handler_game)
        
        # –î–∏–∞–ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        conv_handler_reminder = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(conversations.set_reminder_time_start, pattern="^set_reminder_time$")
            ],
            states={
                conversations.SETTING_REMINDER_TIME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, conversations.reminder_time_received),
                    CallbackQueryHandler(conversations.cancel_conversation, pattern="^conv_cancel$")
                ]
            },
            fallbacks=[CommandHandler("cancel", conversations.cancel_conversation)],
            name="reminder_time_conversation"
        )
        handlers.append(conv_handler_reminder)
        
        self.logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤")
        return handlers
    
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        
        # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.application.add_handler(CommandHandler("admin", commands.admin_command))
        self.application.add_handler(CommandHandler("stats", commands.stats_command))
        self.application.add_handler(CommandHandler("broadcast", commands.broadcast_command))
        self.application.add_handler(CommandHandler("test_schedule", commands.test_schedule_command))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.application.add_handler(CommandHandler("start", commands.start))
        self.application.add_handler(CommandHandler("help", commands.help_command))
        self.application.add_handler(CommandHandler("menu", commands.menu_command))
        
        # –ö–æ–º–∞–Ω–¥—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.application.add_handler(CommandHandler("today", commands.today_command))
        self.application.add_handler(CommandHandler("tomorrow", commands.tomorrow_command))
        self.application.add_handler(CommandHandler("week", commands.week_command))
        self.application.add_handler(CommandHandler("next", commands.next_lesson_command))
        self.application.add_handler(CommandHandler("schedule", commands.schedule_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.application.add_handler(CommandHandler("reminders", commands.reminders_command))
        self.application.add_handler(CommandHandler("me", commands.me_command))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("fact", commands.fact_command))
        self.application.add_handler(CommandHandler("setgroupschedule", commands.set_group_schedule_command))
        self.application.add_handler(CommandHandler("groupinfo", commands.group_info_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        for handler in self._create_conversation_handlers():
            self.application.add_handler(handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(callbacks.schedule_callback, pattern="^schedule_"))
        self.application.add_handler(CallbackQueryHandler(callbacks.reminder_callback, pattern="^(toggle_|disable_)"))
        self.application.add_handler(CallbackQueryHandler(callbacks.group_schedule_callback, pattern="^setgroup_"))
        self.application.add_handler(CallbackQueryHandler(callbacks.quick_action_callback, pattern="^quick_"))
        self.application.add_handler(CallbackQueryHandler(callbacks.menu_callback, pattern="^show_menu$"))
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self._error_handler)
        
        self.logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def _setup_scheduled_jobs(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏."""
        job_queue = self.application.job_queue
        
        if not job_queue:
            self.logger.error("Job queue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        # –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ø–Ω-—Å–± –≤ 7:00)
        morning_time = time(hour=7, minute=0, tzinfo=pytz.timezone(KYIV_TZ))
        job_queue.run_daily(
            callback=send_morning_schedule,
            time=morning_time,
            days=tuple(range(6)),  # –ø–Ω-—Å–±
            name="morning_schedule"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
        job_queue.run_repeating(
            callback=send_daily_reminders,
            interval=60,
            first=10,
            name="daily_reminders"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
        job_queue.run_repeating(
            callback=send_next_lesson_notifications,
            interval=60,
            first=15,
            name="next_lesson_notifications"
        )
        
        self.logger.info("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        try:
            self.logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Application...")
            
            # –°–æ–∑–¥–∞–µ–º Application —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            builder = Application.builder()
            builder.token(config.telegram_token)
            builder.concurrent_updates(True)  # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            builder.read_timeout(config.request_timeout)
            builder.write_timeout(config.request_timeout)
            
            self.application = builder.build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._register_handlers()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            self._setup_scheduled_jobs()
            
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞—é polling...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.run_polling(
                drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                close_loop=False  # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º event loop
            )
            
        except Exception as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
            raise
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
        if self.application:
            self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            try:
                await self.application.stop()
                await self.application.shutdown()
                self.logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    bot = TelegramBot()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        user_count = data_manager.get_users_count()
        groups_count = data_manager.get_groups_count()
        
        main_logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
        main_logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø: {groups_count}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.start()
        
    except KeyboardInterrupt:
        main_logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        main_logger.critical(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
    finally:
        await bot.stop()
        main_logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 