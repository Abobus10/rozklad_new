# -*- coding: utf-8 -*-
"""
–§–∞–±—Ä–∏–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä –¥–ª—è Telegram –±–æ—Ç–∞.

–°—É—á–∞—Å–Ω–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –∑ —Ç–∏–ø—ñ–∑–∞—Ü—ñ—î—é —Ç–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º "–§–∞–±—Ä–∏–∫–∞".
–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ –±–æ—Ç—ñ.
"""

from typing import Dict, List, Optional, Any
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

from data_manager import data_manager
from logger_config import LoggerMixin


class KeyboardFactory(LoggerMixin):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä –±–æ—Ç–∞."""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä."""
        self.logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä")
        
        # –ö–µ—à –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä, —â–æ —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è
        self._cache: Dict[str, InlineKeyboardMarkup] = {}
        self._setup_static_keyboards()

    def _setup_static_keyboards(self) -> None:
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î —Å—Ç–∞—Ç–∏—á–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏."""
        # –®–≤–∏–¥–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        self._cache["quick_nav"] = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow"),
                InlineKeyboardButton("üìö –†–æ–∑–∫–ª–∞–¥", callback_data="quick_schedule")
            ],
            [
                InlineKeyboardButton("üìä –¢–∏–∂–¥–µ–Ω—å", callback_data="quick_week"),
                InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")
            ]
        ])
        
        # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        self._cache["tomorrow_nav"] = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="quick_today"),
                InlineKeyboardButton("üìö –†–æ–∑–∫–ª–∞–¥", callback_data="quick_schedule")
            ],
            [
                InlineKeyboardButton("üìä –¢–∏–∂–¥–µ–Ω—å", callback_data="quick_week"),
                InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")
            ]
        ])
        
        # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–∞—Ä–∏
        self._cache["next_lesson_nav"] = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="quick_today"),
                InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow")
            ],
            [
                InlineKeyboardButton("üìö –†–æ–∑–∫–ª–∞–¥", callback_data="quick_schedule"),
                InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")
            ]
        ])
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞, –∫–æ–ª–∏ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –ø–∞—Ä
        self._cache["no_more_lessons"] = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow"),
                InlineKeyboardButton("üìö –†–æ–∑–∫–ª–∞–¥", callback_data="quick_schedule")
            ],
            [
                InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")
            ]
        ])

    def get_main_menu_keyboard(self, user_id: str, chat_id: str, is_group: bool) -> InlineKeyboardMarkup:
        """
        –°—Ç–≤–æ—Ä—é—î –¥–∏–Ω–∞–º—ñ—á–Ω—É –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É.
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            chat_id: ID —á–∞—Ç—É
            is_group: –ß–∏ —î —á–∞—Ç –≥—Ä—É–ø–æ–≤–∏–º
            
        Returns:
            –ì–æ—Ç–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        """
        if is_group:
            return self._build_group_menu_keyboard(chat_id)
        else:
            return self._build_private_menu_keyboard(user_id)

    def _build_group_menu_keyboard(self, chat_id: str) -> InlineKeyboardMarkup:
        """
        –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É.
        
        Args:
            chat_id: ID –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É
            
        Returns:
            –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–æ–≤–æ–≥–æ –º–µ–Ω—é
        """
        group_data = data_manager.get_group_chat(chat_id)
        default_group = group_data.default_group if group_data else None
        
        if default_group:
            # –ü–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ—ó –≥—Ä—É–ø–∏
            keyboard = [
                [
                    InlineKeyboardButton("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="quick_today"),
                    InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow")
                ],
                [
                    InlineKeyboardButton("üìö –†–æ–∑–∫–ª–∞–¥", callback_data="quick_schedule"),
                    InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞", callback_data="quick_next")
                ],
                [
                    InlineKeyboardButton("üìä –¢–∏–∂–¥–µ–Ω—å", callback_data="quick_week"),
                    InlineKeyboardButton("üé≤ –§–∞–∫—Ç", callback_data="quick_fact")
                ],
                [
                    InlineKeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ –≥—Ä—É–ø–∏", callback_data="quick_groupinfo"),
                    InlineKeyboardButton("üéÆ –ì—Ä–∞", callback_data="quick_game")
                ]
            ]
        else:
            # –û–±–º–µ–∂–µ–Ω–∏–π –Ω–∞–±—ñ—Ä –¥–ª—è –Ω–µ–Ω–∞—Å—Ç—Ä–æ—î–Ω–æ—ó –≥—Ä—É–ø–∏
            keyboard = [
                [
                    InlineKeyboardButton("‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥", callback_data="quick_setgroupschedule")
                ],
                [
                    InlineKeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ –≥—Ä—É–ø–∏", callback_data="quick_groupinfo"),
                    InlineKeyboardButton("üé≤ –§–∞–∫—Ç", callback_data="quick_fact")
                ]
            ]
        
        return InlineKeyboardMarkup(keyboard)

    def _build_private_menu_keyboard(self, user_id: str) -> InlineKeyboardMarkup:
        """
        –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É.
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
        Returns:
            –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        """
        user_data = data_manager.get_user(user_id)
        user_group = user_data.group if user_data else None
        
        if user_group:
            # –ü–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≥—Ä—É–ø–æ—é
            keyboard = [
                [
                    InlineKeyboardButton("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="quick_today"),
                    InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow")
                ],
                [
                    InlineKeyboardButton("üìö –†–æ–∑–∫–ª–∞–¥", callback_data="quick_schedule"),
                    InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞", callback_data="quick_next")
                ],
                [
                    InlineKeyboardButton("üìä –¢–∏–∂–¥–µ–Ω—å", callback_data="quick_week"),
                    InlineKeyboardButton("üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data="quick_reminders")
                ],
                [
                    InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="quick_me"),
                    InlineKeyboardButton("üé≤ –§–∞–∫—Ç", callback_data="quick_fact")
                ],
                [
                    InlineKeyboardButton("üéÆ –ì—Ä–∞", callback_data="quick_game"),
                    InlineKeyboardButton("‚öôÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É", callback_data="quick_setgroup")
                ]
            ]
        else:
            # –û–±–º–µ–∂–µ–Ω–∏–π –Ω–∞–±—ñ—Ä –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–µ–∑ –≥—Ä—É–ø–∏
            keyboard = [
                [
                    InlineKeyboardButton("‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥—Ä—É–ø—É", callback_data="quick_setgroup")
                ],
                [
                    InlineKeyboardButton("üé≤ –§–∞–∫—Ç", callback_data="quick_fact"),
                    InlineKeyboardButton("üéÆ –ì—Ä–∞", callback_data="quick_game")
                ],
                [
                    InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="quick_me")
                ]
            ]
        
        return InlineKeyboardMarkup(keyboard)

    def get_schedule_day_keyboard(self, user_group: str) -> InlineKeyboardMarkup:
        """
        –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –¥–Ω—è —Ç–∏–∂–Ω—è.
        
        Args:
            user_group: –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
        Returns:
            –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –¥–Ω—è
        """
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–Ω—ñ –¥–ª—è –≥—Ä—É–ø–∏
        available_days = self._get_available_days_for_group(user_group)
        
        keyboard = [
            [
                InlineKeyboardButton("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="schedule_today"),
                InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow")
            ]
        ]
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è –ø–æ –¥–≤—ñ –≤ —Ä—è–¥
        for i in range(0, len(available_days), 2):
            row = []
            for day in available_days[i:i+2]:
                row.append(
                    InlineKeyboardButton(
                        day.capitalize(), 
                        callback_data=f"schedule_day_{day}"
                    )
                )
            keyboard.append(row)
        
        return InlineKeyboardMarkup(keyboard)

    def _get_available_days_for_group(self, user_group: str) -> List[str]:
        """
        –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º –¥–ª—è –≥—Ä—É–ø–∏.
        
        Args:
            user_group: –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
        """
        schedule_data = data_manager.schedule_data
        group_schedule = schedule_data.groups.get(user_group)
        
        if not group_schedule:
            return []
            
        schedule = group_schedule.schedule
        
        days_order = ["–ø–æ–Ω–µ–¥—ñ–ª–æ–∫", "–≤—ñ–≤—Ç–æ—Ä–æ–∫", "—Å–µ—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä", "–ø'—è—Ç–Ω–∏—Ü—è", "—Å—É–±–æ—Ç–∞"]
        return [day for day in days_order if day in schedule and schedule[day]]

    def get_reminders_keyboard(self, user_id: str) -> InlineKeyboardMarkup:
        """
        –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
        Returns:
            –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        """
        user = data_manager.get_user(user_id)
        
        daily_reminder_status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ" if user and user.daily_reminder else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
        lesson_notifications_status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ" if user and user.lesson_notifications else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
        
        keyboard = [
            [
                InlineKeyboardButton(
                    f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ {user.reminder_time if user and user.reminder_time else '08:00'}",
                    callback_data="set_reminder_time"
                )
            ],
            [
                InlineKeyboardButton(
                    f"–©–æ–¥–µ–Ω–Ω–µ: {daily_reminder_status}",
                    callback_data="toggle_daily_reminder"
                )
            ],
            [
                InlineKeyboardButton(
                    f"–ü—Ä–æ –ø–∞—Ä–∏: {lesson_notifications_status}",
                    callback_data="toggle_lesson_notifications"
                )
            ],
            [
                InlineKeyboardButton("üö´ –í–∏–º–∫–Ω—É—Ç–∏ –≤—Å–µ", callback_data="disable_reminders"),
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_menu")
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)

    def get_group_selection_keyboard(self) -> ReplyKeyboardMarkup:
        """
        –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏.
        
        Returns:
            Reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –≥—Ä—É–ø–∞–º–∏
        """
        schedule_data = data_manager.get_schedule_data()
        available_groups = list(schedule_data.get("groups", {}).keys())
        
        if not available_groups:
            # –Ø–∫—â–æ –≥—Ä—É–ø –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
            return ReplyKeyboardMarkup([["–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø"]], one_time_keyboard=True)
        
        return ReplyKeyboardMarkup(
            [available_groups], 
            one_time_keyboard=True, 
            input_field_placeholder="–ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏"
        )

    def get_admin_group_selection_keyboard(self, chat_id: str) -> InlineKeyboardMarkup:
        """
        –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º—ñ–Ω–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–∏ —á–∞—Ç—É.
        
        Args:
            chat_id: ID —á–∞—Ç—É –¥–ª—è —è–∫–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≥—Ä—É–ø–∞
            
        Returns:
            Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –≥—Ä—É–ø–∞–º–∏
        """
        schedule_data = data_manager.get_schedule_data()
        available_groups = list(schedule_data.get("groups", {}).keys())
        
        keyboard = []
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –≥—Ä—É–ø–∏ –ø–æ –¥–≤—ñ –≤ —Ä—è–¥
        for i in range(0, len(available_groups), 2):
            row = []
            for group in available_groups[i:i+2]:
                row.append(
                    InlineKeyboardButton(
                        group, 
                        callback_data=f"setgroup_{group}_{chat_id}"
                    )
                )
            keyboard.append(row)
        
        if not keyboard:
            # –Ø–∫—â–æ –≥—Ä—É–ø –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—É –∫–Ω–æ–ø–∫—É
            keyboard.append([
                InlineKeyboardButton("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø", callback_data="no_groups_available")
            ])
        
        return InlineKeyboardMarkup(keyboard)

    def get_conversation_keyboard(self, conversation_type: str, **kwargs) -> InlineKeyboardMarkup:
        """
        –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤.
        
        Args:
            conversation_type: –¢–∏–ø –¥—ñ–∞–ª–æ–≥—É
            **kwargs: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            
        Returns:
            –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É
        """
        if conversation_type == "group_selection":
            return self._get_group_selection_conversation_keyboard()
        elif conversation_type == "game":
            return self._get_game_conversation_keyboard()
        elif conversation_type == "cancel":
            return self._get_cancel_conversation_keyboard()
        else:
            return self._get_default_conversation_keyboard()

    def _get_group_selection_conversation_keyboard(self) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏ –≤ –¥—ñ–∞–ª–æ–∑—ñ."""
        schedule_data = data_manager.get_schedule_data()
        available_groups = list(schedule_data.get("groups", {}).keys())
        
        keyboard = []
        
        # –ì—Ä—É–ø–∏ –ø–æ –¥–≤—ñ –≤ —Ä—è–¥
        for i in range(0, len(available_groups), 2):
            row = []
            for group in available_groups[i:i+2]:
                row.append(
                    InlineKeyboardButton(
                        group, 
                        callback_data=f"conv_group_{group}"
                    )
                )
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        keyboard.append([
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="conv_cancel")
        ])
        
        return InlineKeyboardMarkup(keyboard)

    def _get_game_conversation_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä–∏."""
        return InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –≥—Ä—É", callback_data="conv_cancel")
        ]])

    def _get_cancel_conversation_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó."""
        return InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="conv_cancel")
        ]])

    def _get_default_conversation_keyboard(self) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –¥—ñ–∞–ª–æ–≥—É."""
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üéØ –í –º–µ–Ω—é", callback_data="show_menu")]
        ])

    def get_cached_keyboard(self, keyboard_name: str) -> Optional[InlineKeyboardMarkup]:
        """
        –û—Ç—Ä–∏–º—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–µ—à–∞.
        
        Args:
            keyboard_name: –ù–∞–∑–≤–∞ –∫–µ—à–æ–≤–∞–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
            
        Returns:
            –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–µ—à–∞ –∞–±–æ None
        """
        return self._cache.get(keyboard_name)

    def add_to_cache(self, keyboard_name: str, keyboard: InlineKeyboardMarkup) -> None:
        """
        –î–æ–¥–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤ –∫–µ—à.
        
        Args:
            keyboard_name: –ù–∞–∑–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
            keyboard: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
        """
        self._cache[keyboard_name] = keyboard
        self.logger.debug(f"–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ '{keyboard_name}' –¥–æ–¥–∞–Ω–∞ –≤ –∫–µ—à")

    def clear_cache(self) -> None:
        """–û—á–∏—â–∞—î –∫–µ—à –∫–ª–∞–≤—ñ–∞—Ç—É—Ä."""
        self._cache.clear()
        self._setup_static_keyboards()
        self.logger.info("–ö–µ—à –∫–ª–∞–≤—ñ–∞—Ç—É—Ä –æ—á–∏—â–µ–Ω–∏–π —ñ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω")

    def get_navigation_keyboard(self, nav_type: str) -> InlineKeyboardMarkup:
        """
        –û—Ç—Ä–∏–º—É—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø–æ —Ç–∏–ø—É.
        
        Args:
            nav_type: –¢–∏–ø –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
            
        Returns:
            –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        """
        keyboard_mapping = {
            "quick_nav": "quick_nav",
            "tomorrow_nav": "tomorrow_nav", 
            "next_lesson_nav": "next_lesson_nav",
            "no_more_lessons": "no_more_lessons"
        }
        
        keyboard_name = keyboard_mapping.get(nav_type, "quick_nav")
        return self._cache.get(keyboard_name, self._cache["quick_nav"])

    def create_custom_keyboard(self, buttons_data: List[List[Dict[str, str]]]) -> InlineKeyboardMarkup:
        """
        –°—Ç–≤–æ—Ä—é—î –∫–∞—Å—Ç–æ–º–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
        
        Args:
            buttons_data: –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫—ñ–≤, —â–æ –º—ñ—Å—Ç—è—Ç—å —Å–ª–æ–≤–Ω–∏–∫–∏ –∑ 'text' —ñ 'callback_data'.
            
        Returns:
            –ì–æ—Ç–æ–≤–∞ –∫–∞—Å—Ç–æ–º–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        """
        keyboard = []
        for row_data in buttons_data:
            row = [
                InlineKeyboardButton(button['text'], callback_data=button['callback_data']) 
                for button in row_data
            ]
            keyboard.append(row)
            
        return InlineKeyboardMarkup(keyboard)


# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∞–±—Ä–∏–∫–∏
keyboard_factory = KeyboardFactory()

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
def get_main_menu_keyboard(user_id: str, chat_id: str, is_group: bool) -> InlineKeyboardMarkup:
    """–ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return keyboard_factory.get_main_menu_keyboard(user_id, chat_id, is_group)

def get_schedule_day_keyboard(user_group: str) -> InlineKeyboardMarkup:
    """–ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –¥–ª—è –≤–∏–±–æ—Ä—É –¥–Ω—è."""
    return keyboard_factory.get_schedule_day_keyboard(user_group)

def get_reminders_keyboard(user_id: str) -> InlineKeyboardMarkup:
    """–ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω—å."""
    return keyboard_factory.get_reminders_keyboard(user_id)

def get_group_selection_keyboard() -> ReplyKeyboardMarkup:
    """–ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –¥–ª—è –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏."""
    return keyboard_factory.get_group_selection_keyboard()

def get_admin_group_selection_keyboard(chat_id: str) -> InlineKeyboardMarkup:
    """–ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –¥–ª—è –∞–¥–º—ñ–Ω—Å—å–∫–æ—ó –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–∏."""
    return keyboard_factory.get_admin_group_selection_keyboard(chat_id)

# –°—Ç–∞—Ç–∏—á–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
quick_nav_keyboard = keyboard_factory.get_cached_keyboard("quick_nav")
tomorrow_nav_keyboard = keyboard_factory.get_cached_keyboard("tomorrow_nav")
next_lesson_nav_keyboard = keyboard_factory.get_cached_keyboard("next_lesson_nav")
no_more_lessons_keyboard = keyboard_factory.get_cached_keyboard("no_more_lessons") 