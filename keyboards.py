# -*- coding: utf-8 -*-
"""
–§–∞–±—Ä–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Telegram –±–æ—Ç–∞.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º "–§–∞–±—Ä–∏–∫–∞".
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –±–æ—Ç–µ.
"""

from typing import Dict, List, Optional, Any
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

from data_manager import data_manager
from logger_config import LoggerMixin


class KeyboardFactory(LoggerMixin):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
        
        # –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        self._cache: Dict[str, InlineKeyboardMarkup] = {}
        self._setup_static_keyboards()

    def _setup_static_keyboards(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
        # –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        self._cache["quick_nav"] = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow"),
                InlineKeyboardButton("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="quick_schedule")
            ],
            [
                InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—è", callback_data="quick_week"),
                InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")
            ]
        ])
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        self._cache["tomorrow_nav"] = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="quick_today"),
                InlineKeyboardButton("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="quick_schedule")
            ],
            [
                InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—è", callback_data="quick_week"),
                InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")
            ]
        ])
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã
        self._cache["next_lesson_nav"] = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="quick_today"),
                InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow")
            ],
            [
                InlineKeyboardButton("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="quick_schedule"),
                InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")
            ]
        ])
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–≥–¥–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–∞—Ä
        self._cache["no_more_lessons"] = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow"),
                InlineKeyboardButton("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="quick_schedule")
            ],
            [
                InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")
            ]
        ])

    def get_main_menu_keyboard(self, user_id: str, chat_id: str, is_group: bool) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞
            is_group: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–≤—ã–º
            
        Returns:
            –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        """
        if is_group:
            return self._build_group_menu_keyboard(chat_id)
        else:
            return self._build_private_menu_keyboard(user_id)

    def _build_group_menu_keyboard(self, chat_id: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞.
        
        Args:
            chat_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –º–µ–Ω—é
        """
        group_data = data_manager.get_group_chat(chat_id)
        default_group = group_data.default_group if group_data else None
        
        if default_group:
            # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            keyboard = [
                [
                    InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="quick_today"),
                    InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow")
                ],
                [
                    InlineKeyboardButton("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="quick_schedule"),
                    InlineKeyboardButton("‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞", callback_data="quick_next")
                ],
                [
                    InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—è", callback_data="quick_week"),
                    InlineKeyboardButton("üé≤ –§–∞–∫—Ç", callback_data="quick_fact")
                ],
                [
                    InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –≥—Ä—É–ø–ø—ã", callback_data="quick_groupinfo"),
                    InlineKeyboardButton("üéÆ –ò–≥—Ä–∞", callback_data="quick_game")
                ]
            ]
        else:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –Ω–µ–Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            keyboard = [
                [
                    InlineKeyboardButton("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="quick_setgroupschedule")
                ],
                [
                    InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –≥—Ä—É–ø–ø—ã", callback_data="quick_groupinfo"),
                    InlineKeyboardButton("üé≤ –§–∞–∫—Ç", callback_data="quick_fact")
                ]
            ]
        
        return InlineKeyboardMarkup(keyboard)

    def _build_private_menu_keyboard(self, user_id: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        """
        user_data = data_manager.get_user(user_id)
        user_group = user_data.group if user_data else None
        
        if user_group:
            # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥—Ä—É–ø–ø–æ–π
            keyboard = [
                [
                    InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="quick_today"),
                    InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow")
                ],
                [
                    InlineKeyboardButton("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="quick_schedule"),
                    InlineKeyboardButton("‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞", callback_data="quick_next")
                ],
                [
                    InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—è", callback_data="quick_week"),
                    InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="quick_reminders")
                ],
                [
                    InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="quick_me"),
                    InlineKeyboardButton("üé≤ –§–∞–∫—Ç", callback_data="quick_fact")
                ],
                [
                    InlineKeyboardButton("üéÆ –ò–≥—Ä–∞", callback_data="quick_game"),
                    InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="quick_setgroup")
                ]
            ]
        else:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –≥—Ä—É–ø–ø—ã
            keyboard = [
                [
                    InlineKeyboardButton("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="quick_setgroup")
                ],
                [
                    InlineKeyboardButton("üé≤ –§–∞–∫—Ç", callback_data="quick_fact"),
                    InlineKeyboardButton("üéÆ –ò–≥—Ä–∞", callback_data="quick_game")
                ],
                [
                    InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="quick_me")
                ]
            ]
        
        return InlineKeyboardMarkup(keyboard)

    def get_schedule_day_keyboard(self, user_group: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.
        
        Args:
            user_group: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
        available_days = self._get_available_days_for_group(user_group)
        
        keyboard = [
            [
                InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="schedule_today"),
                InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow")
            ]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
        for i in range(0, len(available_days), 2):
            row = []
            for day in available_days[i:i+2]:
                row.append(
                    InlineKeyboardButton(
                        day.capitalize(), 
                        callback_data=f"schedule_day_{day}"
                    )
                )
            keyboard.append(row)
        
        return InlineKeyboardMarkup(keyboard)

    def _get_available_days_for_group(self, user_group: str) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –≥—Ä—É–ø–ø—ã.
        
        Args:
            user_group: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        """
        schedule_data = data_manager.schedule_data
        group_schedule = schedule_data.groups.get(user_group)
        
        if not group_schedule:
            return []
            
        schedule = group_schedule.schedule
        
        days_order = ["–ø–æ–Ω–µ–¥—ñ–ª–æ–∫", "–≤—ñ–≤—Ç–æ—Ä–æ–∫", "—Å–µ—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä", "–ø'—è—Ç–Ω–∏—Ü—è", "—Å—É–±–æ—Ç–∞"]
        return [day for day in days_order if day in schedule and schedule[day]]

    def get_reminders_keyboard(self, user_id: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        user_data = data_manager.get_user(user_id)
        
        if not user_data:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            daily_reminder = False
            lesson_notifications = True
        else:
            daily_reminder = user_data.daily_reminder
            lesson_notifications = user_data.lesson_notifications
        
        keyboard = [
            [
                InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="set_reminder_time")
            ],
            [
                InlineKeyboardButton(
                    f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'‚úÖ' if daily_reminder else '‚ùå'}",
                    callback_data="toggle_daily_reminder"
                )
            ],
            [
                InlineKeyboardButton(
                    f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏: {'‚úÖ' if lesson_notifications else '‚ùå'}",
                    callback_data="toggle_lesson_notifications"
                )
            ],
            [
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="disable_reminders")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="show_menu")
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)

    def get_group_selection_keyboard(self) -> ReplyKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.
        
        Returns:
            Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
        """
        schedule_data = data_manager.get_schedule_data()
        available_groups = list(schedule_data.get("groups", {}).keys())
        
        if not available_groups:
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            return ReplyKeyboardMarkup([["–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø"]], one_time_keyboard=True)
        
        return ReplyKeyboardMarkup(
            [available_groups], 
            one_time_keyboard=True, 
            input_field_placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
        )

    def get_admin_group_selection_keyboard(self, chat_id: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–ø—ã —á–∞—Ç–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≥—Ä—É–ø–ø–∞
            
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
        """
        schedule_data = data_manager.get_schedule_data()
        available_groups = list(schedule_data.get("groups", {}).keys())
        
        keyboard = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –¥–≤–µ –≤ —Ä—è–¥
        for i in range(0, len(available_groups), 2):
            row = []
            for group in available_groups[i:i+2]:
                row.append(
                    InlineKeyboardButton(
                        group, 
                        callback_data=f"setgroup_{group}_{chat_id}"
                    )
                )
            keyboard.append(row)
        
        if not keyboard:
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
            keyboard.append([
                InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø", callback_data="no_groups_available")
            ])
        
        return InlineKeyboardMarkup(keyboard)

    def get_conversation_keyboard(self, conversation_type: str, **kwargs) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.
        
        Args:
            conversation_type: –¢–∏–ø –¥–∏–∞–ª–æ–≥–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        """
        if conversation_type == "group_selection":
            return self._get_group_selection_conversation_keyboard()
        elif conversation_type == "game":
            return self._get_game_conversation_keyboard()
        elif conversation_type == "cancel":
            return self._get_cancel_conversation_keyboard()
        else:
            return self._get_default_conversation_keyboard()

    def _get_group_selection_conversation_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –≤ –¥–∏–∞–ª–æ–≥–µ."""
        schedule_data = data_manager.get_schedule_data()
        available_groups = list(schedule_data.get("groups", {}).keys())
        
        keyboard = []
        
        # –ì—Ä—É–ø–ø—ã –ø–æ –¥–≤–µ –≤ —Ä—è–¥
        for i in range(0, len(available_groups), 2):
            row = []
            for group in available_groups[i:i+2]:
                row.append(
                    InlineKeyboardButton(
                        group, 
                        callback_data=f"conv_group_{group}"
                    )
                )
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.append([
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="conv_cancel")
        ])
        
        return InlineKeyboardMarkup(keyboard)

    def _get_game_conversation_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã."""
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏–≥—Ä—É", callback_data="conv_cancel")]
        ])

    def _get_cancel_conversation_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã."""
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="conv_cancel")]
        ])

    def _get_default_conversation_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∏–∞–ª–æ–≥–∞."""
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üéØ –í –º–µ–Ω—é", callback_data="show_menu")]
        ])

    def get_cached_keyboard(self, keyboard_name: str) -> Optional[InlineKeyboardMarkup]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫—ç—à–∞.
        
        Args:
            keyboard_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ None
        """
        return self._cache.get(keyboard_name)

    def add_to_cache(self, keyboard_name: str, keyboard: InlineKeyboardMarkup) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∫—ç—à.
        
        Args:
            keyboard_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self._cache[keyboard_name] = keyboard
        self.logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ '{keyboard_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫—ç—à")

    def clear_cache(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
        self._cache.clear()
        self._setup_static_keyboards()
        self.logger.info("–ö—ç—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä –æ—á–∏—â–µ–Ω –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω")

    def get_navigation_keyboard(self, nav_type: str) -> InlineKeyboardMarkup:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Ç–∏–ø—É.
        
        Args:
            nav_type: –¢–∏–ø –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            
        Returns:
            –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        keyboard_mapping = {
            "quick_nav": "quick_nav",
            "tomorrow_nav": "tomorrow_nav", 
            "next_lesson_nav": "next_lesson_nav",
            "no_more_lessons": "no_more_lessons"
        }
        
        keyboard_name = keyboard_mapping.get(nav_type, "quick_nav")
        return self._cache.get(keyboard_name, self._cache["quick_nav"])

    def create_custom_keyboard(self, buttons_data: List[List[Dict[str, str]]]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
        
        Args:
            buttons_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 
                         [[{"text": "...", "callback_data": "..."}, ...], ...]
                         
        Returns:
            –ì–æ—Ç–æ–≤–∞—è –∫–∞—Å—Ç–æ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        keyboard = []
        
        for row_data in buttons_data:
            row = []
            for button_data in row_data:
                button = InlineKeyboardButton(
                    text=button_data.get("text", "–ö–Ω–æ–ø–∫–∞"),
                    callback_data=button_data.get("callback_data", "empty")
                )
                row.append(button)
            keyboard.append(row)
        
        return InlineKeyboardMarkup(keyboard)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∞–±—Ä–∏–∫–∏
keyboard_factory = KeyboardFactory()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_main_menu_keyboard(user_id: str, chat_id: str, is_group: bool) -> InlineKeyboardMarkup:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return keyboard_factory.get_main_menu_keyboard(user_id, chat_id, is_group)

def get_schedule_day_keyboard(user_group: str) -> InlineKeyboardMarkup:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è."""
    return keyboard_factory.get_schedule_day_keyboard(user_group)

def get_reminders_keyboard(user_id: str) -> InlineKeyboardMarkup:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    return keyboard_factory.get_reminders_keyboard(user_id)

def get_group_selection_keyboard() -> ReplyKeyboardMarkup:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
    return keyboard_factory.get_group_selection_keyboard()

def get_admin_group_selection_keyboard(chat_id: str) -> InlineKeyboardMarkup:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã."""
    return keyboard_factory.get_admin_group_selection_keyboard(chat_id)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
quick_nav_keyboard = keyboard_factory.get_cached_keyboard("quick_nav")
tomorrow_nav_keyboard = keyboard_factory.get_cached_keyboard("tomorrow_nav")
next_lesson_nav_keyboard = keyboard_factory.get_cached_keyboard("next_lesson_nav")
no_more_lessons_keyboard = keyboard_factory.get_cached_keyboard("no_more_lessons") 