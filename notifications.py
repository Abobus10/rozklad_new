# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤—ñ—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å Telegram-–±–æ—Ç–∞.

–°—É—á–∞—Å–Ω–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –∑ —Ç–∏–ø—ñ–∑–∞—Ü—ñ—î—é, –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.
"""

import asyncio
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any, Tuple

import pytz
from telegram.ext import ContextTypes
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest, TelegramError, Forbidden

from config import config, DAYS_UA, LESSON_TIMES
from data_manager import data_manager
from schedule_logic import schedule_service
from handlers.utils import schedule_message_deletion
from logger_config import LoggerMixin


class NotificationService(LoggerMixin):
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏ –±–æ—Ç–∞."""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω—å."""
        self.timezone = pytz.timezone(config.timezone)
        self.logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω—å")

    async def handle_telegram_error(self, user_id: str, error: TelegramError, context: str) -> bool:
        """
        –û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏ Telegram API.
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            error: –ü–æ–º–∏–ª–∫–∞ Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
            
        Returns:
            True, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
        """
        error_msg = str(error)
        
        if isinstance(error, Forbidden):
            self.logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞: {error_msg}")
            # –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            data_manager.update_user(user_id, {"active": False})
            return True
        elif "chat not found" in error_msg.lower():
            self.logger.warning(f"–ß–∞—Ç {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {error_msg}")
            return True
        else:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ {context} –¥–ª—è {user_id}: {error_msg}")
            return False

    def _get_current_time(self) -> datetime:
        """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π timezone."""
        return datetime.now(self.timezone)

    def _format_time(self, dt: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —á–∞—Å —É —Ä—è–¥–æ–∫ HH:MM."""
        return dt.strftime("%H:%M")

    def _get_tomorrow_info(self) -> Tuple[datetime, Optional[str]]:
        """
        –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–≤—Ç—Ä–∞—à–Ω—ñ–π –¥–µ–Ω—å.
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–¥–∞—Ç–∞_–∑–∞–≤—Ç—Ä–∞, –Ω–∞–∑–≤–∞_–¥–Ω—è)
        """
        tomorrow = self._get_current_time() + timedelta(days=1)
        day_name = DAYS_UA.get(tomorrow.weekday())
        return tomorrow, day_name

    async def send_daily_reminders(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ù–∞–¥—Å–∏–ª–∞—î —â–æ–¥–µ–Ω–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
        
        –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —â–æ—Ö–≤–∏–ª–∏–Ω–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        """
        current_time = self._format_time(self._get_current_time())
        tomorrow, day_name = self._get_tomorrow_info()
        
        self.logger.debug(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ–¥–µ–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –Ω–∞ {current_time}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        users_to_notify = self._get_users_for_daily_reminder(current_time)
        
        if not users_to_notify:
            return
        
        self.logger.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å {len(users_to_notify)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
        
        # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
        semaphore = asyncio.Semaphore(config.max_concurrent_notifications)
        
        tasks = [
            self._send_daily_reminder_to_user(context, user_id, user_data, tomorrow, day_name, semaphore)
            for user_id, user_data in users_to_notify.items()
        ]
        
        await asyncio.gather(*tasks, return_exceptions=True)

    def _get_users_for_daily_reminder(self, current_time: str) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.
        
        Args:
            current_time: –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ {user_id: user_data}
        """
        all_users = data_manager.get_all_users_data()
        
        return {
            user_id: user_data
            for user_id, user_data in all_users.items()
            if (
                user_data.get("daily_reminder", False) and 
                user_data.get("reminder_time") == current_time and
                user_data.get("group") and
                user_data.get("active", True)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            )
        }

    async def _send_daily_reminder_to_user(
        self, 
        context: ContextTypes.DEFAULT_TYPE, 
        user_id: str, 
        user_data: Dict[str, Any],
        tomorrow: datetime, 
        day_name: Optional[str],
        semaphore: asyncio.Semaphore
    ) -> None:
        """
        –ù–∞–¥—Å–∏–ª–∞—î —â–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_data: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            tomorrow: –î–∞—Ç–∞ –∑–∞–≤—Ç—Ä–∞
            day_name: –ù–∞–∑–≤–∞ –¥–Ω—è –∑–∞–≤—Ç—Ä–∞
            semaphore: –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
        """
        async with semaphore:
            try:
                user_group = user_data["group"]
                
                if not day_name:
                    # –ó–∞–≤—Ç—Ä–∞ –≤–∏—Ö—ñ–¥–Ω–∏–π
                    message_text = "üîî *–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è*\n\n–ó–∞–≤—Ç—Ä–∞ –≤–∏—Ö—ñ–¥–Ω–∏–π! –ú–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏ üòä"
                    await self._send_simple_reminder(context, user_id, message_text)
                    return
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                tomorrow_week = schedule_service.get_current_week(tomorrow)
                lessons = schedule_service.get_day_schedule(user_group, day_name, tomorrow_week)
                
                if lessons:
                    schedule_text = schedule_service.format_schedule_text(user_group, day_name, lessons, tomorrow_week)
                    message_text = f"üîî *–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è*\n\n{schedule_text}"
                else:
                    message_text = "üîî *–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è*\n\n–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ–º–∞—î! –ú–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏ üòä"
                
                await self._send_simple_reminder(context, user_id, message_text)
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ {user_id}: {e}")

    async def _send_simple_reminder(self, context: ContextTypes.DEFAULT_TYPE, user_id: str, text: str) -> None:
        """
        –ù–∞–¥—Å–∏–ª–∞—î –ø—Ä–æ—Å—Ç–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            text: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        """
        try:
            message = await context.bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode='Markdown'
            )
            
            # –ü–ª–∞–Ω—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 12 –≥–æ–¥–∏–Ω
            schedule_message_deletion(message, context, delay_seconds=12 * 3600)
            
        except TelegramError as e:
            await self.handle_telegram_error(user_id, e, "daily_reminder")

    async def send_morning_schedule(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ù–∞–¥—Å–∏–ª–∞—î —Ä–∞–Ω–∫–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥ —É –≤—Å—ñ –≥—Ä—É–ø–æ–≤—ñ —á–∞—Ç–∏ –æ 7:00.
        
        –ü–µ—Ä–µ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä—ñ–ø–ª—é—î —Ç–∞ –≤–∏–¥–∞–ª—è—î —Å—Ç–∞—Ä–µ.
        """
        self.logger.info("–ó–∞–ø—É—Å–∫ —Ä–∞–Ω–∫–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç—ñ–≤")
        
        today = self._get_current_time()
        day_name = DAYS_UA.get(today.weekday())

        # –ù–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤ –Ω–µ–¥—ñ–ª—é
        if not day_name or today.weekday() == 6:
            self.logger.info(f"–°—å–æ–≥–æ–¥–Ω—ñ {day_name or '–Ω–µ–¥—ñ–ª—è'}, —Ä–∞–Ω–∫–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è")
            return

        week = schedule_service.get_current_week()
        group_chats = data_manager.get_all_group_chats()
        
        if not group_chats:
            self.logger.info("–ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç—ñ–≤")
            return
        
        # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å
        semaphore = asyncio.Semaphore(config.max_concurrent_notifications)
        
        tasks = [
            self._send_morning_schedule_to_chat(context, chat_id, chat_info, day_name, week, semaphore)
            for chat_id, chat_info in group_chats.items()
        ]
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        success_count = sum(1 for result in results if result is True)
        self.logger.info(f"–†–∞–Ω–∫–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ {success_count} –∑ {len(group_chats)} —á–∞—Ç—ñ–≤")

    async def _send_morning_schedule_to_chat(
        self, 
        context: ContextTypes.DEFAULT_TYPE, 
        chat_id: str, 
        chat_info: Dict[str, Any],
        day_name: str, 
        week: int,
        semaphore: asyncio.Semaphore
    ) -> bool:
        """
        –ù–∞–¥—Å–∏–ª–∞—î —Ä–∞–Ω–∫–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥ –≤ –æ–¥–∏–Ω –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç.
        
        Returns:
            True, —è–∫—â–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ
        """
        async with semaphore:
            try:
                group_name = chat_info.get("default_group")
                
                if not group_name:
                    self.logger.warning(f"–î–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    return False
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._remove_old_pinned_message(context, chat_id, chat_info)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                lessons = schedule_service.get_day_schedule(group_name, day_name, week)
                
                if not lessons:
                    await self._send_no_lessons_message(context, chat_id, chat_info, group_name, day_name)
                    return True
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                await self._send_schedule_message(context, chat_id, chat_info, group_name, day_name, lessons, week)
                return True
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                return False

    async def _remove_old_pinned_message(
        self, 
        context: ContextTypes.DEFAULT_TYPE, 
        chat_id: str, 
        chat_info: Dict[str, Any]
    ) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        pinned_message_id = chat_info.get("pinned_schedule_message_id")
        
        if not pinned_message_id:
            return
        
        try:
            await context.bot.unpin_chat_message(chat_id=chat_id, message_id=pinned_message_id)
            await context.bot.delete_message(chat_id=chat_id, message_id=pinned_message_id)
            self.logger.debug(f"–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {pinned_message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id}")
            
        except BadRequest as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {pinned_message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")

    async def _send_no_lessons_message(
        self, 
        context: ContextTypes.DEFAULT_TYPE, 
        chat_id: str, 
        chat_info: Dict[str, Any],
        group_name: str, 
        day_name: str
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–∞—Ä."""
        message_text = f"*{day_name.capitalize()}*\n\n–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã *{group_name}* –Ω–µ—Ç! üéâ"
        
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º ID —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "pinned_schedule_message_id" in chat_info:
            del chat_info["pinned_schedule_message_id"]
            data_manager.save_group_chat_data()
        
        self.logger.info(f"–î–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–∞ {day_name} –Ω–µ—Ç –ø–∞—Ä, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")

    async def _send_schedule_message(
        self, 
        context: ContextTypes.DEFAULT_TYPE, 
        chat_id: str, 
        chat_info: Dict[str, Any],
        group_name: str, 
        day_name: str, 
        lessons: List[Dict[str, Any]], 
        week: int
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."""
        schedule_text = schedule_service.format_schedule_text(group_name, day_name, lessons, week)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow"),
                InlineKeyboardButton("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="quick_schedule")
            ],
            [
                InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—è", callback_data="quick_week"),
                InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        new_message = await context.bot.send_message(
            chat_id=chat_id,
            text=schedule_text,
            parse_mode='Markdown',
            reply_markup=reply_markup,
            disable_notification=True  # –ò–∑–±–µ–≥–∞–µ–º –¥–≤–æ–π–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        )
        
        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.pin_chat_message(
            chat_id=chat_id, 
            message_id=new_message.message_id, 
            disable_notification=False
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_info["pinned_schedule_message_id"] = new_message.message_id
        data_manager.update_group_chat(chat_id, chat_info)
        
        self.logger.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}. "
            f"Message ID: {new_message.message_id}"
        )

    async def send_next_lesson_notifications(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ.
        
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É. –¢—Ä–∏–≥–≥–µ—Ä–æ–º —Å–ª—É–∂–∏—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã.
        """
        current_time = self._format_time(self._get_current_time())
        today = self._get_current_time()
        day_name = DAYS_UA.get(today.weekday())

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä
        lesson_end_times = {pair: end_time for pair, (_, end_time) in LESSON_TIMES.items()}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞–∫–æ–π-–ª–∏–±–æ –ø–∞—Ä—ã
        if not day_name or current_time not in lesson_end_times.values():
            return

        current_lesson_num = next(
            (num for num, time in lesson_end_times.items() if time == current_time), 
            None
        )
        
        if not current_lesson_num:
            return
        
        self.logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ (–ø–æ—Å–ª–µ {current_lesson_num} –ø–∞—Ä—ã)")
        
        week = schedule_service.get_current_week()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(
            self._send_personal_next_lesson_notifications(context, day_name, week, current_lesson_num),
            self._send_group_next_lesson_notifications(context, day_name, week, current_lesson_num),
            return_exceptions=True
        )

    async def _send_personal_next_lesson_notifications(
        self, 
        context: ContextTypes.DEFAULT_TYPE, 
        day_name: str, 
        week: int, 
        current_lesson_num: int
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –≤ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã."""
        users_data = data_manager.get_all_users_data()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        users_to_notify = {
            user_id: user_data
            for user_id, user_data in users_data.items()
            if (
                user_data.get("lesson_notifications", True) and
                user_data.get("group") and
                user_data.get("active", True)
            )
        }
        
        if not users_to_notify:
            return
        
        semaphore = asyncio.Semaphore(config.max_concurrent_notifications)
        
        tasks = [
            self._send_next_lesson_to_user(context, user_id, user_data, day_name, week, current_lesson_num, semaphore)
            for user_id, user_data in users_to_notify.items()
        ]
        
        await asyncio.gather(*tasks, return_exceptions=True)

    async def _send_next_lesson_to_user(
        self, 
        context: ContextTypes.DEFAULT_TYPE, 
        user_id: str, 
        user_data: Dict[str, Any],
        day_name: str, 
        week: int, 
        current_lesson_num: int,
        semaphore: asyncio.Semaphore
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        async with semaphore:
            try:
                user_group = user_data["group"]
                lessons_today = schedule_service.get_day_schedule(user_group, day_name, week)
                
                next_lesson = self._find_next_lesson(lessons_today, current_lesson_num)
                
                if next_lesson:
                    message_text = self._format_next_lesson_message(next_lesson)
                else:
                    message_text = (
                        "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n"
                        "üìö –°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç!\n"
                        "–ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å! üò¥"
                    )
                
                await self._send_simple_reminder(context, user_id, message_text)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    def _find_next_lesson(self, lessons: List[Dict[str, Any]], current_lesson_num: int) -> Optional[Dict[str, Any]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π.
        
        Args:
            lessons: –°–ø–∏—Å–æ–∫ –ø–∞—Ä –Ω–∞ –¥–µ–Ω—å
            current_lesson_num: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–π—Å—è –ø–∞—Ä—ã
            
        Returns:
            –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ –∏–ª–∏ None
        """
        return next(
            (lesson for lesson in lessons if lesson['pair'] > current_lesson_num),
            None
        )

    def _format_next_lesson_message(self, lesson: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ.
        
        Args:
            lesson: –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–µ
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        time_start, time_end = LESSON_TIMES.get(lesson['pair'], ("??:??", "??:??"))
        
        return (
            f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ*\n\n"
            f"üïê –í—Ä–µ–º—è: {time_start} - {time_end}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {lesson['name']}\n"
            f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.get('teacher', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üè† –ö–∞–±–∏–Ω–µ—Ç: {lesson.get('room', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        )

    async def _send_group_next_lesson_notifications(
        self, 
        context: ContextTypes.DEFAULT_TYPE, 
        day_name: str, 
        week: int, 
        current_lesson_num: int
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –≤ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã."""
        group_chats = data_manager.get_all_group_chats()
        
        if not group_chats:
            return
        
        semaphore = asyncio.Semaphore(config.max_concurrent_notifications)
        
        tasks = [
            self._send_next_lesson_to_group(context, chat_id, chat_info, day_name, week, current_lesson_num, semaphore)
            for chat_id, chat_info in group_chats.items()
            if chat_info.get("default_group")
        ]
        
        await asyncio.gather(*tasks, return_exceptions=True)

    async def _send_next_lesson_to_group(
        self, 
        context: ContextTypes.DEFAULT_TYPE, 
        chat_id: str, 
        chat_info: Dict[str, Any],
        day_name: str, 
        week: int, 
        current_lesson_num: int,
        semaphore: asyncio.Semaphore
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç."""
        async with semaphore:
            try:
                group_name = chat_info["default_group"]
                lessons_today = schedule_service.get_day_schedule(group_name, day_name, week)
                
                next_lesson = self._find_next_lesson(lessons_today, current_lesson_num)
                
                if next_lesson:
                    message_text = self._format_next_lesson_message(next_lesson)
                else:
                    message_text = (
                        "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n"
                        "üìö –°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç!\n"
                        "–ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å! üò¥"
                    )
                
                message = await context.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode='Markdown'
                )
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
                schedule_message_deletion(message, context, delay_seconds=2 * 3600)
                
            except TelegramError as e:
                await self.handle_telegram_error(chat_id, e, "group_next_lesson")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
send_daily_reminders = notification_service.send_daily_reminders
send_morning_schedule = notification_service.send_morning_schedule
send_next_lesson_notifications = notification_service.send_next_lesson_notifications 