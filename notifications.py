# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å.

–ú—ñ—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è —á–µ—Ä–µ–∑ `JobQueue` –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è
–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–æ —Ä–æ–∑–∫–ª–∞–¥ —Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä–∏.
"""

import logging
import pytz
from datetime import datetime, timedelta
from telegram.ext import ContextTypes
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest

from config import TIMEZONE, DAYS_UA, LESSON_TIMES
from data_manager import (
    users_data, group_chats_data, save_users_data, 
    schedule_data, schedule_start_date, save_group_chat_data
)
from schedule_logic import get_current_week, get_day_schedule, format_schedule_text
from handlers.utils import schedule_message_deletion

logger = logging.getLogger(__name__)


async def send_daily_reminders(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–∞–¥—Å–∏–ª–∞—î —â–æ–¥–µ–Ω–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
    
    –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —â–æ—Ö–≤–∏–ª–∏–Ω–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è, —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (`daily_reminder`)
    —ñ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ —á–∞—Å–æ–º, –≤–∫–∞–∑–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (`reminder_time`).
    """
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    current_time = datetime.now(pytz.timezone(TIMEZONE)).strftime("%H:%M")
    
    for user_id, user_data in users_data.items():
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ü—å–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
        if (user_data.get("daily_reminder", False) and 
            user_data.get("reminder_time") == current_time and
            user_data.get("group")):
            
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                tomorrow = datetime.now(pytz.timezone(TIMEZONE)) + timedelta(days=1)
                day_name = DAYS_UA.get(tomorrow.weekday())
                
                if day_name and day_name in schedule_data.get("groups", {}).get(user_data["group"], {}).get("schedule", {}):
                    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∏–∂–Ω—è –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω—å–æ–≥–æ –¥–Ω—è
                    tomorrow_week = get_current_week(tomorrow)
                    
                    lessons = get_day_schedule(user_data["group"], day_name, tomorrow_week)
                    
                    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    if lessons:
                        reminder_text = f"üîî *–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è*\n\n"
                        reminder_text += format_schedule_text(user_data["group"], day_name, lessons, tomorrow_week)
                        
                        message = await context.bot.send_message(
                            chat_id=user_id,
                            text=reminder_text,
                            parse_mode='Markdown'
                        )
                        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 12 –≥–æ–¥–∏–Ω
                        schedule_message_deletion(message, context, delay_seconds=12 * 3600)
                    else:
                        message = await context.bot.send_message(
                            chat_id=user_id,
                            text="üîî *–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è*\n\n–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ–º–∞—î! –ú–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏ üòä",
                            parse_mode='Markdown'
                        )
                        schedule_message_deletion(message, context, delay_seconds=12 * 3600)
                else:
                    # –û–±—Ä–æ–±–∫–∞ –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ–º–∞—î —Ä–æ–∑–∫–ª–∞–¥—É (–Ω–∞–ø—Ä. –Ω–µ–¥—ñ–ª—è)
                    message = await context.bot.send_message(
                        chat_id=user_id,
                        text="üîî *–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è*\n\n–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ–º–∞—î! –ú–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏ üòä",
                        parse_mode='Markdown'
                    )
                    schedule_message_deletion(message, context, delay_seconds=12 * 3600)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

async def send_morning_schedule(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–∞–¥—Å–∏–ª–∞—î —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ —É –≤—Å—ñ –≥—Ä—É–ø–æ–≤—ñ —á–∞—Ç–∏ –æ 7:00.
    
    –ü–µ—Ä–µ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤—ñ–¥–∫—Ä—ñ–ø–ª—é—î —Ç–∞ –≤–∏–¥–∞–ª—è—î —Å—Ç–∞—Ä–µ.
    –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–∫—Ä—ñ–ø–ª—é—î—Ç—å—Å—è, –∞ –π–æ–≥–æ ID –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è.
    """
    logger.info("–ó–∞–ø—É—Å–∫ —Ä–∞–Ω–∫–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç—ñ–≤...")
    today = datetime.now(pytz.timezone(TIMEZONE))
    day_name = DAYS_UA.get(today.weekday())

    # –ù–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —É –Ω–µ–¥—ñ–ª—é
    if not day_name or today.weekday() == 6:
        logger.info(f"–°—å–æ–≥–æ–¥–Ω—ñ {day_name}, —Ä–∞–Ω–∫–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è.")
        return

    week = get_current_week()

    # –Ü—Ç–µ—Ä–∞—Ü—ñ—è –ø–æ –≤—Å—ñ—Ö –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö
    for chat_id, chat_info in group_chats_data.items():
        group_name = chat_info.get("default_group")
        
        if not group_name:
            logger.warning(f"–î–ª—è —á–∞—Ç—É {chat_id} –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥—Ä—É–ø—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, –ø—Ä–æ–ø—É—Å–∫.")
            continue
            
        try:
            # --- –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
            pinned_message_id = chat_info.get("pinned_schedule_message_id")
            if pinned_message_id:
                try:
                    await context.bot.unpin_chat_message(chat_id=chat_id, message_id=pinned_message_id)
                    await context.bot.delete_message(chat_id=chat_id, message_id=pinned_message_id)
                    logger.info(f"–°—Ç–∞—Ä–µ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {pinned_message_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–∞—Ç—É {chat_id}.")
                except BadRequest as e:
                    # –ü–æ–º–∏–ª–∫–∞ –º–æ–∂–µ –≤–∏–Ω–∏–∫–Ω—É—Ç–∏, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –±–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤.
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏/–≤—ñ–¥–∫—Ä—ñ–ø–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {pinned_message_id} –≤ —á–∞—Ç—ñ {chat_id}: {e}")
                
            lessons = get_day_schedule(group_name, day_name, week)
            
            # –Ø–∫—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ –ø–∞—Ä –Ω–µ–º–∞—î, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –Ω–µ –∑–∞–∫—Ä—ñ–ø–ª—é—î–º–æ –π–æ–≥–æ.
            if not lessons:
                message = await context.bot.send_message(
                    chat_id=chat_id, 
                    text=f"*{day_name.capitalize()}*\n\n–°—å–æ–≥–æ–¥–Ω—ñ –ø–∞—Ä –¥–ª—è –≥—Ä—É–ø–∏ *{group_name}* –Ω–µ–º–∞—î! üéâ",
                    parse_mode='Markdown'
                )
                logger.info(f"–î–ª—è –≥—Ä—É–ø–∏ {group_name} –Ω–∞ {day_name} –Ω–µ–º–∞—î –ø–∞—Ä, –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç {chat_id}.")
                # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π ID, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–º–∞—î
                if "pinned_schedule_message_id" in chat_info:
                    del chat_info["pinned_schedule_message_id"]
                continue

            schedule_text = format_schedule_text(group_name, day_name, lessons, week)
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è —à–≤–∏–¥–∫–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
            keyboard = [
                [InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="quick_tomorrow"),
                 InlineKeyboardButton("üìö –†–æ–∑–∫–ª–∞–¥", callback_data="quick_schedule")],
                [InlineKeyboardButton("üìä –¢–∏–∂–¥–µ–Ω—å", callback_data="quick_week"),
                 InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            new_message = await context.bot.send_message(
                chat_id=chat_id, 
                text=schedule_text,
                parse_mode='Markdown',
                reply_markup=reply_markup,
                disable_notification=True # –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–≤—ñ–¥–ø—Ä–∞–≤–∫–∞ + –ø—ñ–Ω)
            )
            
            # --- –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –π–æ–≥–æ ID ---
            await context.bot.pin_chat_message(chat_id=chat_id, message_id=new_message.message_id, disable_notification=False)
            chat_info["pinned_schedule_message_id"] = new_message.message_id
            save_group_chat_data()
            
            logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç–∞ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–æ –Ω–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥ –≤ —á–∞—Ç—ñ {chat_id} –¥–ª—è –≥—Ä—É–ø–∏ {group_name}. Message ID: {new_message.message_id}")

        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–∞–Ω–∫–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥ –≤ —á–∞—Ç {chat_id}: {e}")


async def send_next_lesson_notifications(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–∞—Ä—É.
    
    –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —â–æ—Ö–≤–∏–ª–∏–Ω–∏. –¢—Ä–∏–≥–µ—Ä–æ–º –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —î —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–∞—Ä–∏.
    –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è —è–∫ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ —á–∞—Ç–∏ (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ), —Ç–∞–∫ —ñ –≤ –≥—Ä—É–ø–æ–≤—ñ.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–∞—Ä—É...")
    today = datetime.now(pytz.timezone(TIMEZONE))
    current_time = today.strftime('%H:%M')
    day_name = DAYS_UA.get(today.weekday())

    # –°–ª–æ–≤–Ω–∏–∫ –∑ —á–∞—Å–æ–º –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø–∞—Ä, —â–æ —î —Ç—Ä–∏–≥–µ—Ä–æ–º –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    lesson_end_times = {
        1: "09:20", 2: "10:50", 3: "12:30", 4: "14:00",
        5: "15:30", 6: "17:00", 7: "18:30", 8: "20:00"
    }
    
    # –í–∏—Ö—ñ–¥, —è–∫—â–æ –∑–∞—Ä–∞–∑ –Ω–µ —á–∞—Å –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    if not day_name or current_time not in lesson_end_times.values():
        return

    current_lesson_num = next((num for num, time in lesson_end_times.items() if time == current_time), None)
    if not current_lesson_num:
        return
        
    week = get_current_week()

    # --- –û–±—Ä–æ–±–∫–∞ –æ—Å–æ–±–∏—Å—Ç–∏—Ö —á–∞—Ç—ñ–≤ ---
    for user_id, user_data in users_data.items():
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–≤—ñ–º–∫–Ω—É–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç–∞ –≤–∫–∞–∑–∞–≤ –≥—Ä—É–ø—É
        if not user_data.get("lesson_notifications", True) or not user_data.get("group"):
            continue

        lessons_today = get_day_schedule(user_data["group"], day_name, week)
        if not lessons_today:
            continue

        # –ü–æ—à—É–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–∞—Ä–∏
        next_lesson = next((l for l in lessons_today if l['pair'] > current_lesson_num), None)
        
        try:
            keyboard = [[InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            if next_lesson:
                lesson_time = LESSON_TIMES.get(next_lesson['pair'], ("??:??",))[0]
                notification_text = (
                    f"üîî *–ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞* (—á–µ—Ä–µ–∑ 10 —Ö–≤):\n\n"
                    f"üïê –ß–∞—Å: {lesson_time}\n"
                    f"üìö –ü—Ä–µ–¥–º–µ—Ç: {next_lesson['name']}\n"
                    f"üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á: {next_lesson.get('teacher', 'N/A')}\n"
                    f"üè† –ö–∞–±—ñ–Ω–µ—Ç: {next_lesson.get('room', 'N/A')}"
                )
                message = await context.bot.send_message(
                    chat_id=user_id, text=notification_text, 
                    reply_markup=reply_markup, parse_mode='Markdown'
                )
                schedule_message_deletion(message, context)
            else:
                # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∫—ñ–Ω–µ—Ü—å –ø–∞—Ä
                message = await context.bot.send_message(
                    chat_id=user_id, text="üéâ *–¶–µ –±—É–ª–∞ –æ—Å—Ç–∞–Ω–Ω—è –ø–∞—Ä–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ!*\n\n–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! üòä",
                    reply_markup=reply_markup, parse_mode='Markdown'
                )
                schedule_message_deletion(message, context)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–∞—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

    # --- –û–±—Ä–æ–±–∫–∞ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç—ñ–≤ ---
    for chat_id, chat_info in group_chats_data.items():
        group_name = chat_info.get("default_group")
        if not group_name:
            continue

        lessons_today = get_day_schedule(group_name, day_name, week)
        if not lessons_today:
            continue

        next_lesson = next((l for l in lessons_today if l['pair'] > current_lesson_num), None)

        try:
            keyboard = [[InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            if next_lesson:
                lesson_time = LESSON_TIMES.get(next_lesson['pair'], ("??:??",))[0]
                notification_text = (
                    f"üîî *–ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞* (—á–µ—Ä–µ–∑ 10 —Ö–≤):\n\n"
                    f"üïê –ß–∞—Å: {lesson_time}\n"
                    f"üìö –ü—Ä–µ–¥–º–µ—Ç: {next_lesson['name']}\n"
                    f"üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á: {next_lesson.get('teacher', 'N/A')}\n"
                    f"üè† –ö–∞–±—ñ–Ω–µ—Ç: {next_lesson.get('room', 'N/A')}"
                )
                message = await context.bot.send_message(
                    chat_id=chat_id, text=notification_text, 
                    reply_markup=reply_markup, parse_mode='Markdown'
                )
                schedule_message_deletion(message, context)
            else:
                message = await context.bot.send_message(
                    chat_id=chat_id, text="üéâ *–¶–µ –±—É–ª–∞ –æ—Å—Ç–∞–Ω–Ω—è –ø–∞—Ä–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ!*\n\n–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è –≤—Å—ñ–º! üòä",
                    reply_markup=reply_markup, parse_mode='Markdown'
                )
                schedule_message_deletion(message, context)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–∞—Ä—É –≤ —á–∞—Ç {chat_id}: {e}") 