# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º.

–ú—ñ—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ç–∏–∂–Ω—è, –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É,
—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ç–∞ —Ä–æ–±–æ—Ç–∏ –∑ —á–∞—Å–æ–º –∑–∞–Ω—è—Ç—å.
"""

import pytz
from datetime import datetime, time
from typing import Optional, List, Union

from telegram import Update

from config import DAYS_UA, LESSON_TIMES, TIMEZONE, get_lesson_time_display
from data_manager import data_manager
from models import LessonModel, UserModel
from logger_config import get_module_logger

logger = get_module_logger(__name__)


class ScheduleService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º."""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑–∫–ª–∞–¥—É."""
        self._timezone = pytz.timezone(TIMEZONE)
    
    def get_current_week(self, target_date: Optional[datetime] = None) -> int:
        """
        –í–∏–∑–Ω–∞—á–∞—î –Ω–æ–º–µ—Ä –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ç–∏–∂–Ω—è (1 –∞–±–æ 2).
        
        Args:
            target_date: –î–∞—Ç–∞ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É. –Ø–∫—â–æ None, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞.
            
        Returns:
            –ù–æ–º–µ—Ä —Ç–∏–∂–Ω—è (1 –∞–±–æ 2)
        """
        start_date = data_manager.schedule_start_date
        if not start_date:
            logger.warning("–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É —Å–µ–º–µ—Å—Ç—Ä—É –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–æ–≤–µ—Ä—Ç–∞—é —Ç–∏–∂–¥–µ–Ω—å 1")
            return 1
        
        if target_date is None:
            target_date = datetime.now(self._timezone)
        
        try:
            # –ü—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É (naive datetime)
            if target_date.tzinfo is not None:
                target_date = target_date.replace(tzinfo=None)
                
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é –≤ –¥–Ω—è—Ö
            delta_days = (target_date.date() - start_date.date()).days
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–∂–¥–µ–Ω—å (0 -> —Ç–∏–∂–¥–µ–Ω—å 1, 1 -> —Ç–∏–∂–¥–µ–Ω—å 2, 2 -> —Ç–∏–∂–¥–µ–Ω—å 1, ...)
            week_number = (delta_days // 7) % 2 + 1
            
            logger.debug(f"–¢–∏–∂–¥–µ–Ω—å –¥–ª—è –¥–∞—Ç–∏ {target_date.date()}: {week_number}")
            return week_number
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ç–∏–∂–Ω—è: {e}")
            return 1
    
    def is_group_chat(self, update: Update) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —á–∞—Ç –≥—Ä—É–ø–æ–≤–∏–º.
        
        Args:
            update: Telegram update –æ–±'—î–∫—Ç
            
        Returns:
            True —è–∫—â–æ —Ü–µ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç
        """
        return update.effective_chat.type in ['group', 'supergroup']
    
    def get_user_group(self, user_id: Union[str, int], chat_id: Optional[Union[str, int]] = None) -> Optional[str]:
        """
        –û—Ç—Ä–∏–º—É—î –≥—Ä—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            chat_id: ID —á–∞—Ç—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏ –∞–±–æ None
        """
        user_id_str = str(user_id)
        chat_id_str = str(chat_id) if chat_id else None
        
        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É
        if chat_id_str:
            group_chat = data_manager.get_group_chat(chat_id_str)
            if group_chat.default_group:
                logger.debug(f"–ó–Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø—É {group_chat.default_group} –¥–ª—è —á–∞—Ç—É {chat_id_str}")
                return group_chat.default_group
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–æ–±–∏—Å—Ç—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = data_manager.get_user(user_id_str)
        if user and user.group:
            logger.debug(f"–ó–Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø—É {user.group} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_str}")
            return user.group
        
        logger.debug(f"–ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_str}")
        return None
    
    def get_day_lessons(
        self, 
        group: str, 
        day: str, 
        week: Optional[int] = None,
        sort_by_pair: bool = True
    ) -> List[LessonModel]:
        """
        –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—å –¥–ª—è –≥—Ä—É–ø–∏, –¥–Ω—è —Ç–∞ —Ç–∏–∂–Ω—è.
        
        Args:
            group: –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏
            day: –î–µ–Ω—å —Ç–∏–∂–Ω—è
            week: –ù–æ–º–µ—Ä —Ç–∏–∂–Ω—è (—è–∫—â–æ None, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∏–π)
            sort_by_pair: –ß–∏ —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º –ø–∞—Ä–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—å
        """
        if week is None:
            week = self.get_current_week()
        
        lessons = data_manager.get_day_lessons(group, day)
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ —Ç–∏–∂–Ω–µ–º
        filtered_lessons = [
            lesson for lesson in lessons 
            if week in lesson.weeks
        ]
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º –ø–∞—Ä–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if sort_by_pair:
            filtered_lessons.sort(key=lambda x: x.pair)
        
        logger.debug(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(filtered_lessons)} –∑–∞–Ω—è—Ç—å –¥–ª—è {group}, {day}, —Ç–∏–∂–¥–µ–Ω—å {week}")
        return filtered_lessons
    
    def format_schedule_text(
        self, 
        group: str, 
        day: str, 
        lessons: List[LessonModel], 
        week: int,
        include_week_info: bool = True
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
        
        Args:
            group: –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏
            day: –î–µ–Ω—å —Ç–∏–∂–Ω—è  
            lessons: –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—å
            week: –ù–æ–º–µ—Ä —Ç–∏–∂–Ω—è
            include_week_info: –ß–∏ –≤–∫–ª—é—á–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–∏–∂–¥–µ–Ω—å
            
        Returns:
            –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —Ä–æ–∑–∫–ª–∞–¥—É
        """
        if not lessons:
            week_text = f" ({week} —Ç–∏–∂–¥–µ–Ω—å)" if include_week_info else ""
            return f"üìÖ –ù–∞ {day.capitalize()}{week_text} –ø–∞—Ä –Ω–µ–º–∞—î üò¥"
        
        lines = [f"üìÖ *–†–æ–∑–∫–ª–∞–¥ –¥–ª—è –≥—Ä—É–ø–∏ {group}*"]
        
        if include_week_info:
            lines.append(f"üóì {day.capitalize()} ({week} —Ç–∏–∂–¥–µ–Ω—å):")
        else:
            lines.append(f"üóì {day.capitalize()}:")
        
        lines.append("")
        
        for lesson in lessons:
            time_display = get_lesson_time_display(lesson.pair)
            
            lesson_text = [
                f"*{lesson.pair} –ø–∞—Ä–∞* ({time_display}):",
                f"üìö {lesson.name}"
            ]
            
            if lesson.teacher:
                lesson_text.append(f"üë®‚Äçüè´ {lesson.teacher}")
            
            if lesson.room:
                lesson_text.append(f"üè† –ö–∞–±—ñ–Ω–µ—Ç: {lesson.room}")
            
            lines.append("\n".join(lesson_text))
            lines.append("")
        
        formatted_text = "\n".join(lines).rstrip()
        logger.debug(f"–í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ —Ç–µ–∫—Å—Ç —Ä–æ–∑–∫–ª–∞–¥—É: {len(formatted_text)} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        return formatted_text
    
    def get_next_lesson(self, group: str, target_time: Optional[datetime] = None) -> Optional[LessonModel]:
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è –≥—Ä—É–ø–∏.
        
        Args:
            group: –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏
            target_time: –ß–∞—Å –¥–ª—è –ø–æ—à—É–∫—É (—è–∫—â–æ None, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∏–π)
            
        Returns:
            –ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–Ω—è—Ç—Ç—è –∞–±–æ None
        """
        if target_time is None:
            target_time = datetime.now(self._timezone)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ–Ω—å —Ç–∏–∂–Ω—è
        weekday = target_time.weekday()
        day_name = DAYS_UA.get(weekday)
        
        if not day_name:
            logger.debug("–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å")
            return None
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        lessons_today = self.get_day_lessons(group, day_name)
        
        if not lessons_today:
            logger.debug(f"–ù–∞ {day_name} –Ω–µ–º–∞—î –∑–∞–Ω—è—Ç—å –¥–ª—è –≥—Ä—É–ø–∏ {group}")
            return None
        
        # –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM
        current_time = target_time.strftime("%H:%M")
        
        # –®—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–Ω—è—Ç—Ç—è
        for lesson in lessons_today:
            lesson_start_time, _ = LESSON_TIMES.get(lesson.pair, ("00:00", "00:00"))
            if lesson_start_time > current_time:
                logger.debug(f"–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–Ω—è—Ç—Ç—è: {lesson.name} –æ {lesson_start_time}")
                return lesson
        
        logger.debug("–ë—ñ–ª—å—à–µ –∑–∞–Ω—è—Ç—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î")
        return None
    
    def get_current_lesson(self, group: str, target_time: Optional[datetime] = None) -> Optional[LessonModel]:
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ—Ç–æ—á–Ω–µ –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è –≥—Ä—É–ø–∏.
        
        Args:
            group: –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏
            target_time: –ß–∞—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (—è–∫—â–æ None, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∏–π)
            
        Returns:
            –ü–æ—Ç–æ—á–Ω–µ –∑–∞–Ω—è—Ç—Ç—è –∞–±–æ None
        """
        if target_time is None:
            target_time = datetime.now(self._timezone)
        
        weekday = target_time.weekday()
        day_name = DAYS_UA.get(weekday)
        
        if not day_name:
            return None
        
        lessons_today = self.get_day_lessons(group, day_name)
        current_time_str = target_time.strftime("%H:%M")
        
        for lesson in lessons_today:
            start_time, end_time = LESSON_TIMES.get(lesson.pair, ("00:00", "00:00"))
            if start_time <= current_time_str <= end_time:
                logger.debug(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–Ω—è—Ç—Ç—è: {lesson.name}")
                return lesson
        
        return None
    
    def get_week_schedule(self, group: str, week: Optional[int] = None) -> dict[str, List[LessonModel]]:
        """
        –û—Ç—Ä–∏–º—É—î —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤–µ—Å—å —Ç–∏–∂–¥–µ–Ω—å –¥–ª—è –≥—Ä—É–ø–∏.
        
        Args:
            group: –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏
            week: –ù–æ–º–µ—Ä —Ç–∏–∂–Ω—è (—è–∫—â–æ None, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∏–π)
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å
        """
        if week is None:
            week = self.get_current_week()
            
        week_schedule = {}
        for day in DAYS_UA.values():
            lessons = self.get_day_lessons(group, day, week)
            if lessons:
                week_schedule[day] = lessons
                
        return week_schedule
    
    def time_until_lesson(self, lesson: LessonModel, target_time: Optional[datetime] = None) -> str:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î —á–∞—Å –¥–æ –ø–æ—á–∞—Ç–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–∞—Ä–∏.
        
        Args:
            lesson: –û–±'—î–∫—Ç –∑–∞–Ω—è—Ç—Ç—è
            target_time: –ß–∞—Å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É (—è–∫—â–æ None, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∏–π)
            
        Returns:
            –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫ –∑ —á–∞—Å–æ–º –¥–æ –ø–æ—á–∞—Ç–∫—É
        """
        if target_time is None:
            target_time = datetime.now(self._timezone)
        
        lesson_start_time_str = LESSON_TIMES.get(lesson.pair, ("00:00", "00:00"))[0]
        
        try:
            lesson_start_time = self._timezone.localize(
                datetime.combine(target_time.date(), time.fromisoformat(lesson_start_time_str))
            )
            
            # –Ø–∫—â–æ –ø–∞—Ä–∞ –≤–∂–µ –º–∞–ª–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∏—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ
            if lesson_start_time < target_time:
                return "–≤–∂–µ –ø–æ—á–∞–ª–∞—Å—è"

            delta = lesson_start_time - target_time
            
            hours, remainder = divmod(delta.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            
            if hours > 0:
                return f"—á–µ—Ä–µ–∑ {hours} –≥–æ–¥ {minutes} —Ö–≤"
            else:
                return f"—á–µ—Ä–µ–∑ {minutes} —Ö–≤"
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —á–∞—Å—É –¥–æ –ø–∞—Ä–∏: {e}")
            return "–Ω–µ–≤—ñ–¥–æ–º–æ"

# –°—Ç–≤–æ—Ä—é—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è –≤—Å—å–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
schedule_service = ScheduleService()