# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–µ–±–Ω–æ–π –Ω–µ–¥–µ–ª–∏, –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è,
—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–Ω—è—Ç–∏–π.
"""

import pytz
from datetime import datetime, time
from typing import Optional, List, Union

from telegram import Update

from config import DAYS_UA, LESSON_TIMES, TIMEZONE, get_lesson_time_display
from data_manager import data_manager
from models import LessonModel, UserModel
from logger_config import get_module_logger

logger = get_module_logger(__name__)


class ScheduleService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        self._timezone = pytz.timezone(TIMEZONE)
    
    def get_current_week(self, target_date: Optional[datetime] = None) -> int:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–º–µ—Ä —É—á–µ–±–Ω–æ–π –Ω–µ–¥–µ–ª–∏ (1 –∏–ª–∏ 2).
        
        Args:
            target_date: –î–∞—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞.
            
        Returns:
            –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (1 –∏–ª–∏ 2)
        """
        start_date = data_manager.schedule_start_date
        if not start_date:
            logger.warning("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é –Ω–µ–¥–µ–ª—é 1")
            return 1
        
        if target_date is None:
            target_date = datetime.now(self._timezone)
        
        try:
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É (naive datetime)
            if target_date.tzinfo is not None:
                target_date = target_date.replace(tzinfo=None)
                
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
            delta_days = (target_date.date() - start_date.date()).days
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–µ–ª—é (0 -> –Ω–µ–¥–µ–ª—è 1, 1 -> –Ω–µ–¥–µ–ª—è 2, 2 -> –Ω–µ–¥–µ–ª—è 1, ...)
            week_number = (delta_days // 7) % 2 + 1
            
            logger.debug(f"–ù–µ–¥–µ–ª—è –¥–ª—è –¥–∞—Ç—ã {target_date.date()}: {week_number}")
            return week_number
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–µ–¥–µ–ª–∏: {e}")
            return 1
    
    def is_group_chat(self, update: Update) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–≤—ã–º.
        
        Args:
            update: Telegram update –æ–±—ä–µ–∫—Ç
            
        Returns:
            True –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        """
        return update.effective_chat.type in ['group', 'supergroup']
    
    def get_user_group(self, user_id: Union[str, int], chat_id: Optional[Union[str, int]] = None) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ None
        """
        user_id_str = str(user_id)
        chat_id_str = str(chat_id) if chat_id else None
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        if chat_id_str:
            group_chat = data_manager.get_group_chat(chat_id_str)
            if group_chat.default_group:
                logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ {group_chat.default_group} –¥–ª—è —á–∞—Ç–∞ {chat_id_str}")
                return group_chat.default_group
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = data_manager.get_user(user_id_str)
        if user.group:
            logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ {user.group} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
            return user.group
        
        logger.debug(f"–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
        return None
    
    def get_day_lessons(
        self, 
        group: str, 
        day: str, 
        week: Optional[int] = None,
        sort_by_pair: bool = True
    ) -> List[LessonModel]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã, –¥–Ω—è –∏ –Ω–µ–¥–µ–ª–∏.
        
        Args:
            group: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            day: –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            week: –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è)
            sort_by_pair: –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π
        """
        if week is None:
            week = self.get_current_week()
        
        lessons = data_manager.get_day_lessons(group, day)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª–µ
        filtered_lessons = [
            lesson for lesson in lessons 
            if week in lesson.weeks
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if sort_by_pair:
            filtered_lessons.sort(key=lambda x: x.pair)
        
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_lessons)} –∑–∞–Ω—è—Ç–∏–π –¥–ª—è {group}, {day}, –Ω–µ–¥–µ–ª—è {week}")
        return filtered_lessons
    
    def format_schedule_text(
        self, 
        group: str, 
        day: str, 
        lessons: List[LessonModel], 
        week: int,
        include_week_info: bool = True
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
        
        Args:
            group: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            day: –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏  
            lessons: –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π
            week: –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
            include_week_info: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–µ
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        """
        if not lessons:
            week_text = f" ({week} —Ç–∏–∂–¥–µ–Ω—å)" if include_week_info else ""
            return f"üìÖ –ù–∞ {day.capitalize()}{week_text} –ø–∞—Ä –Ω–µ–º–∞—î üò¥"
        
        lines = [f"üìÖ *–†–æ–∑–∫–ª–∞–¥ –¥–ª—è –≥—Ä—É–ø–∏ {group}*"]
        
        if include_week_info:
            lines.append(f"üóì {day.capitalize()} ({week} —Ç–∏–∂–¥–µ–Ω—å):")
        else:
            lines.append(f"üóì {day.capitalize()}:")
        
        lines.append("")
        
        for lesson in lessons:
            time_display = get_lesson_time_display(lesson.pair)
            
            lesson_text = [
                f"*{lesson.pair} –ø–∞—Ä–∞* ({time_display}):",
                f"üìö {lesson.name}"
            ]
            
            if lesson.teacher:
                lesson_text.append(f"üë®‚Äçüè´ {lesson.teacher}")
            
            if lesson.room:
                lesson_text.append(f"üè† –ö–∞–±—ñ–Ω–µ—Ç: {lesson.room}")
            
            lines.append("\n".join(lesson_text))
            lines.append("")
        
        formatted_text = "\n".join(lines).rstrip()
        logger.debug(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {len(formatted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return formatted_text
    
    def get_next_lesson(self, group: str, target_time: Optional[datetime] = None) -> Optional[LessonModel]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã.
        
        Args:
            group: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            target_time: –í—Ä–µ–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ)
            
        Returns:
            –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–ª–∏ None
        """
        if target_time is None:
            target_time = datetime.now(self._timezone)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        weekday = target_time.weekday()
        day_name = DAYS_UA.get(weekday)
        
        if not day_name:
            logger.debug("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        lessons_today = self.get_day_lessons(group, day_name)
        
        if not lessons_today:
            logger.debug(f"–ù–∞ {day_name} –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
            return None
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        current_time = target_time.strftime("%H:%M")
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ
        for lesson in lessons_today:
            lesson_start_time = LESSON_TIMES.get(lesson.pair, ("00:00", "00:00"))[0]
            if lesson_start_time > current_time:
                logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ: {lesson.name} –≤ {lesson_start_time}")
                return lesson
        
        logger.debug("–ë–æ–ª—å—à–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç")
        return None
    
    def get_current_lesson(self, group: str, target_time: Optional[datetime] = None) -> Optional[LessonModel]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã.
        
        Args:
            group: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            target_time: –í—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ)
            
        Returns:
            –¢–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–ª–∏ None
        """
        if target_time is None:
            target_time = datetime.now(self._timezone)
        
        weekday = target_time.weekday()
        day_name = DAYS_UA.get(weekday)
        
        if not day_name:
            return None
        
        lessons_today = self.get_day_lessons(group, day_name)
        current_time = target_time.strftime("%H:%M")
        
        # –ò—â–µ–º –∑–∞–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏–¥–µ—Ç —Å–µ–π—á–∞—Å
        for lesson in lessons_today:
            start_time, end_time = LESSON_TIMES.get(lesson.pair, ("00:00", "00:00"))
            if start_time <= current_time <= end_time:
                logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ: {lesson.name}")
                return lesson
        
        return None
    
    def get_week_schedule(self, group: str, week: Optional[int] = None) -> dict[str, List[LessonModel]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é.
        
        Args:
            group: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            week: –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ –¥–Ω—è–º
        """
        if week is None:
            week = self.get_current_week()
        
        week_schedule = {}
        for day_num, day_name in DAYS_UA.items():
            if day_num < 6:  # –¢–æ–ª—å–∫–æ —É—á–µ–±–Ω—ã–µ –¥–Ω–∏ (–ø–Ω-—Å–±)
                lessons = self.get_day_lessons(group, day_name, week)
                if lessons:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏
                    week_schedule[day_name] = lessons
        
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: {len(week_schedule)} –¥–Ω–µ–π —Å –∑–∞–Ω—è—Ç–∏—è–º–∏")
        return week_schedule
    
    def time_until_lesson(self, lesson: LessonModel, target_time: Optional[datetime] = None) -> str:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è.
        
        Args:
            lesson: –ó–∞–Ω—è—Ç–∏–µ
            target_time: –í—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ)
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∑–∞–Ω—è—Ç–∏—è
        """
        if target_time is None:
            target_time = datetime.now(self._timezone)
        
        lesson_start_time_str = LESSON_TIMES.get(lesson.pair, ("00:00", "00:00"))[0]
        
        # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏—è
        lesson_time = datetime.strptime(lesson_start_time_str, "%H:%M").time()
        lesson_datetime = datetime.combine(target_time.date(), lesson_time)
        
        if target_time.tzinfo:
            lesson_datetime = self._timezone.localize(lesson_datetime)
        
        time_diff = lesson_datetime - target_time
        
        if time_diff.total_seconds() <= 0:
            return "–ó–∞–Ω—è—Ç–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å"
        
        hours, remainder = divmod(int(time_diff.total_seconds()), 3600)
        minutes = remainder // 60
        
        if hours > 0:
            return f"–ß–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω"
        else:
            return f"–ß–µ—Ä–µ–∑ {minutes} –º–∏–Ω"


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
schedule_service = ScheduleService()

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_current_week(target_date: Optional[datetime] = None) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)."""
    return schedule_service.get_current_week(target_date)

def is_group_chat(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)."""
    return schedule_service.is_group_chat(update)

def get_user_group(user_id: str, chat_id: str = None) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)."""
    return schedule_service.get_user_group(user_id, chat_id)

def get_day_schedule(group: str, day: str, week: int = None) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)."""
    lessons = schedule_service.get_day_lessons(group, day, week)
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return [lesson.model_dump() for lesson in lessons]

def format_schedule_text(group: str, day: str, lessons: list, week: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å).""" 
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    lesson_models = [LessonModel.model_validate(lesson) for lesson in lessons]
    return schedule_service.format_schedule_text(group, day, lesson_models, week)

def get_next_lesson(user_group: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)."""
    lesson = schedule_service.get_next_lesson(user_group)
    return lesson.model_dump() if lesson else None 