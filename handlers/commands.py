# -*- coding: utf-8 -*-
"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞.

–°—É—á–∞—Å–Ω–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –∑ —Ç–∏–ø—ñ–∑–∞—Ü—ñ—î—é, –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä–∏–Ω—Ü–∏–ø–∏ —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥—É —Ç–∞ —Ö–æ—Ä–æ—à—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏ Python —Ä–æ–∑—Ä–æ–±–∫–∏.
"""

from datetime import datetime, timedelta
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest, TelegramError

from config import config, DAYS_UA, LESSON_TIMES
from data_manager import data_manager
from schedule_logic import schedule_service
from keyboards import (
    get_main_menu_keyboard, get_schedule_day_keyboard, get_reminders_keyboard,
    get_admin_group_selection_keyboard,
    quick_nav_keyboard, tomorrow_nav_keyboard, next_lesson_nav_keyboard,
    no_more_lessons_keyboard
)
from handlers.utils import get_fact, schedule_message_deletion, admin_only
from notifications import send_morning_schedule
from logger_config import LoggerMixin


class CommandHandlers(LoggerMixin):
    """–ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∑ —Å—É—á–∞—Å–Ω–æ—é –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é."""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥."""
        self.logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥")

    async def handle_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error_msg: str) -> None:
        """
        –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫.
        
        Args:
            update: –û–Ω–æ–≤–ª–µ–Ω–Ω—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            error_msg: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        """
        self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ: {error_msg}")
        
        try:
            if update.message:
                await update.message.reply_text(
                    "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    parse_mode='Markdown'
                )
        except TelegramError as e:
            self.logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e}")

    def _get_user_context(self, update: Update) -> tuple[str, str, bool]:
        """
        –û—Ç—Ä–∏–º—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —á–∞—Ç—É.
        
        Args:
            update: –û–Ω–æ–≤–ª–µ–Ω–Ω—è Telegram
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (user_id, chat_id, is_group)
        """
        user = update.effective_user
        chat = update.effective_chat
        user_id = str(user.id)
        chat_id = str(chat.id)
        is_group = chat.type in ['group', 'supergroup']
        
        return user_id, chat_id, is_group

    @admin_only
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—É—î –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏."""
        try:
            admin_help_text = (
                "üëë *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                "`/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
                "`/broadcast [–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]` - –†–æ–∑—Å–∏–ª–∫–∞\n"
                "`/test_schedule` - –¢–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–æ–∑–∫–ª–∞–¥—É"
            )
            
            message = await update.message.reply_text(
                admin_help_text, 
                parse_mode='Markdown'
            )
            schedule_message_deletion(message, context, 600)
            
        except TelegramError as e:
            await self.handle_error(update, context, f"admin_command: {e}")

    @admin_only
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞."""
        try:
            total_users = data_manager.get_users_count()
            active_today = data_manager.get_active_users_today()
            total_groups = data_manager.get_groups_count()
            
            stats_text = (
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
                f"üë§ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
                f"üë• –ì—Ä—É–ø —É —Ä–æ–∑–∫–ª–∞–¥—ñ: {total_groups}\n"
                f"üìà –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ: {active_today}"
            )
            
            message = await update.message.reply_text(
                stats_text, 
                parse_mode='Markdown'
            )
            schedule_message_deletion(message, context, 600)
            
        except Exception as e:
            await self.handle_error(update, context, f"stats_command: {e}")

    @admin_only
    async def broadcast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–†–æ–±–∏—Ç—å —Ä–æ–∑—Å–∏–ª–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º."""
        try:
            message_to_send = " ".join(context.args)
            if not message_to_send:
                message = await update.message.reply_text(
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.\n"
                    "–ü—Ä–∏–∫–ª–∞–¥: `/broadcast –ü—Ä–∏–≤—ñ—Ç —É—Å—ñ–º!`",
                    parse_mode='Markdown'
                )
                schedule_message_deletion(message, context)
                return

            sent_count, failed_count = 0, 0
            users = data_manager.get_all_users_data()
            
            for user_id in users.keys():
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üì¢ *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{message_to_send}",
                        parse_mode='Markdown'
                    )
                    sent_count += 1
                except TelegramError as e:
                    self.logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")
                    failed_count += 1
            
            reply_text = (
                f"üì¢ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {sent_count}\n"
                f"‚ùå –ü–æ–º–∏–ª–æ–∫: {failed_count}"
            )
            
            message = await update.message.reply_text(reply_text)
            schedule_message_deletion(message, context, 600)
            
        except Exception as e:
            await self.handle_error(update, context, f"broadcast_command: {e}")

    @admin_only
    async def test_schedule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ó–∞–ø—É—Å–∫–∞—î —Ç–µ—Å—Ç–æ–≤—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Ä–∞–Ω–∫–æ–≤–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É."""
        try:
            await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Ä–æ–∑–∫–ª–∞–¥—É...")
            await send_morning_schedule(context)
            
            message = await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            schedule_message_deletion(message, context)
            
        except Exception as e:
            await self.handle_error(update, context, f"test_schedule_command: {e}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        
        –†–µ—î—Å—Ç—Ä—É—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –≤—ñ—Ç–∞—î —ñ—Å–Ω—É—é—á–æ–≥–æ.
        """
        try:
            user_id, chat_id, is_group = self._get_user_context(update)
            user = update.effective_user
            
            if is_group:
                await self._handle_group_start(update, context, chat_id)
            else:
                await self._handle_private_start(update, context, user_id, user)
                await self.menu_command(update, context)
                
        except Exception as e:
            await self.handle_error(update, context, f"start: {e}")

    async def _handle_group_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str) -> None:
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start –≤ –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ."""
        chat_title = update.effective_chat.title
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç
        group_data = data_manager.get_group_chat(chat_id)
        default_group = group_data.default_group if group_data else None
        
        data_manager.update_group_chat(chat_id, **{"chat_title": chat_title})
        
        welcome_text = f"üëã –ü—Ä–∏–≤—ñ—Ç, –≥—Ä—É–ø–∞ *{chat_title}*!\n–Ø –±–æ—Ç —Ä–æ–∑–∫–ª–∞–¥—É –∫–æ–ª–µ–¥–∂—É! üìö\n\n"
        
        if default_group:
            welcome_text += f"‚úÖ –î–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥ –≥—Ä—É–ø–∏ *{default_group}*.\n"
        else:
            welcome_text += "‚ö†Ô∏è –î–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –∫–æ–º–∞–Ω–¥–æ—é /setgroupschedule.\n"
        
        welcome_text += "\nüéØ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π."
        
        message = await update.message.reply_text(welcome_text, parse_mode='Markdown')
        schedule_message_deletion(message, context)

    async def _handle_private_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   user_id: str, user) -> None:
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ."""
        existing_user = data_manager.get_user(user_id)
        
        if not existing_user:
            # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            data_manager.update_user(
                user_id,
                first_name=user.first_name,
                username=user.username,
                registration_date=datetime.now()
            )
            
            message = await update.message.reply_html(
                f"–ü—Ä–∏–≤—ñ—Ç, {user.mention_html()}! üëã –†–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏."
            )
        else:
            # –Ü—Å–Ω—É—é—á–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            data_manager.update_user(user_id, first_name=user.first_name, username=user.username)
            
            message = await update.message.reply_html(
                f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {user.first_name}! üëã"
            )
        
        schedule_message_deletion(message, context, 60)

    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                          from_callback: bool = False) -> None:
        """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏."""
        try:
            user_id, chat_id, is_group = self._get_user_context(update)
            
            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –º–µ–Ω—é
            menu_text = self._build_menu_text(user_id, chat_id, is_group)
            reply_markup = get_main_menu_keyboard(user_id, chat_id, is_group)
            
            if from_callback:
                query = update.callback_query
                try:
                    await query.edit_message_text(
                        menu_text, 
                        reply_markup=reply_markup, 
                        parse_mode='Markdown'
                    )
                except BadRequest as e:
                    if "Message is not modified" not in str(e):
                        raise
            else:
                message = await update.message.reply_text(
                    menu_text, 
                    reply_markup=reply_markup, 
                    parse_mode='Markdown'
                )
                schedule_message_deletion(message, context)
                
        except Exception as e:
            await self.handle_error(update, context, f"menu_command: {e}")

    def _build_menu_text(self, user_id: str, chat_id: str, is_group: bool) -> str:
        """–§–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        
        if is_group:
            group_chat_data = data_manager.get_group_chat(chat_id)
            group_name = group_chat_data.default_group or '–Ω–µ –æ–±—Ä–∞–Ω–∞'
            
            menu_text = (
                f"üìã *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–∏*\n"
                f"–ü–æ—Ç–æ—á–Ω–∞ –≥—Ä—É–ø–∞: *{group_name}*\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
            )
        else:
            user_data = data_manager.get_user(user_id)
            group_name = user_data.group if user_data and user_data.group else '–Ω–µ –æ–±—Ä–∞–Ω–∞'
            
            menu_text = (
                "üìã *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*\n"
                f"–¢–≤–æ—è –≥—Ä—É–ø–∞: *{group_name}*\n\n"
                "–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?"
            )
        return menu_text

    async def today_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           from_callback: bool = False) -> None:
        """–ü–æ–∫–∞–∑—É—î —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ."""
        try:
            user_id, chat_id, is_group = self._get_user_context(update)
            user_group = schedule_service.get_user_group(user_id, chat_id if is_group else None)
            
            if not user_group:
                await self._send_no_group_message(update, from_callback)
                return
            
            today = datetime.now()
            day_name = DAYS_UA.get(today.weekday())
            
            if not day_name:
                text = "üóì –°—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å!"
                keyboard = quick_nav_keyboard
            else:
                current_week = schedule_service.get_current_week()
                lessons = schedule_service.get_day_lessons(user_group, day_name, current_week)
                
                if lessons:
                    text = schedule_service.format_schedule_text(user_group, day_name, lessons, current_week)
                    keyboard = quick_nav_keyboard
                else:
                    text = f"üìÖ *{day_name.capitalize()}*\n\n–°—å–æ–≥–æ–¥–Ω—ñ –ø–∞—Ä –Ω–µ–º–∞—î! üéâ"
                    keyboard = quick_nav_keyboard
            
            await self._send_or_edit_message(update, text, keyboard, from_callback, context)
            
        except Exception as e:
            await self.handle_error(update, context, f"today_command: {e}")

    async def tomorrow_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                              from_callback: bool = False) -> None:
        """–ü–æ–∫–∞–∑—É—î —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞."""
        try:
            user_id, chat_id, is_group = self._get_user_context(update)
            user_group = schedule_service.get_user_group(user_id, chat_id if is_group else None)
            
            if not user_group:
                await self._send_no_group_message(update, from_callback)
                return
            
            tomorrow = datetime.now() + timedelta(days=1)
            day_name = DAYS_UA.get(tomorrow.weekday())
            
            if not day_name:
                text = "üóì –ó–∞–≤—Ç—Ä–∞ –≤–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å!"
                keyboard = tomorrow_nav_keyboard
            else:
                tomorrow_week = schedule_service.get_current_week(tomorrow)
                lessons = schedule_service.get_day_lessons(user_group, day_name, tomorrow_week)
                
                if lessons:
                    text = schedule_service.format_schedule_text(user_group, day_name, lessons, tomorrow_week)
                    keyboard = tomorrow_nav_keyboard
                else:
                    text = f"üìÖ *{day_name.capitalize()}*\n\n–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ–º–∞—î! üéâ"
                    keyboard = tomorrow_nav_keyboard
            
            await self._send_or_edit_message(update, text, keyboard, from_callback, context)
            
        except Exception as e:
            await self.handle_error(update, context, f"tomorrow_command: {e}")

    async def next_lesson_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–∞—Ä—É."""
        try:
            user_id, chat_id, is_group = self._get_user_context(update)
            user_group = schedule_service.get_user_group(user_id, chat_id if is_group else None)
            
            if not user_group:
                await self._send_no_group_message(update, False)
                return
            
            next_lesson_info = schedule_service.get_next_lesson(user_group)
            
            if next_lesson_info:
                text = f"‚è∞ *–ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞*\n\n{next_lesson_info}"
                keyboard = next_lesson_nav_keyboard
            else:
                text = "‚è∞ *–ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞*\n\n–ë—ñ–ª—å—à–µ –ø–∞—Ä —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î. –ú–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏! üò¥"
                keyboard = no_more_lessons_keyboard
            
            message = await update.message.reply_text(
                text, 
                reply_markup=keyboard, 
                parse_mode='Markdown'
            )
            schedule_message_deletion(message, context)
            
        except Exception as e:
            await self.handle_error(update, context, f"next_lesson_command: {e}")

    async def _send_no_group_message(self, update: Update, from_callback: bool) -> None:
        """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥—Ä—É–ø—É."""
        keyboard = [[InlineKeyboardButton("‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥—Ä—É–ø—É", callback_data="quick_setgroup")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = "‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≥—Ä—É–ø—É."
        
        if from_callback:
            query = update.callback_query
            await query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)

    async def _send_or_edit_message(self, update: Update, text: str, keyboard, 
                                   from_callback: bool, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞–¥—Å–∏–ª–∞—î –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Ä–µ–¥–∞–≥—É—î —ñ—Å–Ω—É—é—á–µ."""
        if from_callback:
            query = update.callback_query
            try:
                await query.edit_message_text(
                    text, 
                    reply_markup=keyboard, 
                    parse_mode='Markdown'
                )
            except BadRequest as e:
                if "Message is not modified" not in str(e):
                    raise
        else:
            message = await update.message.reply_text(
                text, 
                reply_markup=keyboard, 
                parse_mode='Markdown'
            )
            schedule_message_deletion(message, context)

    async def schedule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback: bool = False) -> None:
        """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É –¥–Ω—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–æ–∑–∫–ª–∞–¥—É."""
        try:
            user_id, chat_id, is_group = self._get_user_context(update)
            user_group = schedule_service.get_user_group(user_id, chat_id if is_group else None)

            if not user_group:
                await self._send_no_group_message(update, from_callback)
                return

            text = "üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–æ–∑–∫–ª–∞–¥—É:"
            keyboard = get_schedule_day_keyboard(user_group)
            
            await self._send_or_edit_message(update, text, keyboard, from_callback, context)

        except Exception as e:
            await self.handle_error(update, context, f"schedule_command: {e}")


# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
command_handlers = CommandHandlers()

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
admin_command = command_handlers.admin_command
stats_command = command_handlers.stats_command
broadcast_command = command_handlers.broadcast_command
test_schedule_command = command_handlers.test_schedule_command
start = command_handlers.start
menu_command = command_handlers.menu_command
schedule_command = command_handlers.schedule_command
today_command = command_handlers.today_command
tomorrow_command = command_handlers.tomorrow_command
next_lesson_command = command_handlers.next_lesson_command

# TODO: –î–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —ñ—Ç–µ—Ä–∞—Ü—ñ—è—Ö
# –¶–µ –¥–æ–∑–≤–æ–ª—è—î –ø–æ—Å—Ç—É–ø–æ–≤–æ –º—ñ–≥—Ä—É–≤–∞—Ç–∏ –∫–æ–¥ –±–µ–∑ –ø–æ—Ä—É—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ