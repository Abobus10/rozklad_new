# -*- coding: utf-8 -*-
"""
–î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–æ–¥—É–ª—å (—É—Ç–∏–ª—ñ—Ç–∏).

–ú—ñ—Å—Ç–∏—Ç—å —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ —Ä—ñ–∑–Ω–∏—Ö —á–∞—Å—Ç–∏–Ω–∞—Ö –∫–æ–¥—É:
- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.
- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ (–Ω–∞–ø—Ä., –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è).
- –Ü–Ω—à—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–Ω–∞–ø—Ä., –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–∫—Ç—É).
"""

import logging
import random
from httpx import AsyncClient, RequestError
from json import JSONDecodeError
from telegram import Message, Update
from telegram.ext import ContextTypes
from functools import wraps
from config import ADMIN_IDS

logger = logging.getLogger(__name__)

# A simple list of facts
facts = [
    "–ü–µ—Ä—à–∏–π –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç - –∂—ñ–Ω–∫–∞, –ê–¥–∞ –õ–∞–≤–ª–µ–π—Å.",
    "Python –±—É–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ —á–µ—Å—Ç—å –∫–æ–º–µ–¥—ñ–π–Ω–æ—ó –≥—Ä—É–ø–∏ 'Monty Python'.",
    "–ü–µ—Ä—à–∏–π –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –≤—ñ—Ä—É—Å –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É 1983 —Ä–æ—Ü—ñ.",
    "–©–æ–¥–Ω—è —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –±–ª–∏–∑—å–∫–æ 5000 –Ω–æ–≤–∏—Ö –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö –≤—ñ—Ä—É—Å—ñ–≤.",
    "–ü–µ—Ä—à–∏–π –≥—ñ–≥–∞–±–∞–π—Ç–Ω–∏–π –∂–æ—Ä—Å—Ç–∫–∏–π –¥–∏—Å–∫ –≤–∞–∂–∏–≤ –ø–æ–Ω–∞–¥ 250 –∫–≥.",
    "–í—Å–µ—Å–≤—ñ—Ç–Ω—è –ø–∞–≤—É—Ç–∏–Ω–∞ (WWW) —Ç–∞ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç - —Ü–µ –Ω–µ –æ–¥–Ω–µ –π —Ç–µ —Å–∞–º–µ.",
    "–õ—é–¥—Å—å–∫–µ –æ–∫–æ –º–æ–≥–ª–æ –± –±—É—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–æ—é –∫–∞–º–µ—Ä–æ—é –Ω–∞ 576 –º–µ–≥–∞–ø—ñ–∫—Å–µ–ª—ñ–≤.",
    "–í —Å–µ—Ä–µ–¥–Ω—å–æ–º—É, –ª—é–¥–∏–Ω–∞ –º–æ—Ä–≥–∞—î 20 —Ä–∞–∑—ñ–≤ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É.",
    "–ë–ª–∏–∑—å–∫–æ 70% –Ω–∞—à–æ–≥–æ —Ç—ñ–ª–∞ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –≤–æ–¥–∏.",
    "–ù–∞–π–≤–∏—â–∞ –≥–æ—Ä–∞ –≤ –°–æ–Ω—è—á–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ - –û–ª—ñ–º–ø –Ω–∞ –ú–∞—Ä—Å—ñ."
]

def get_fact() -> str:
    """Returns a random fact from the list."""
    return random.choice(facts)

def admin_only(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ–º–∞–Ω–¥–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.
    
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î `user_id` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ –≤–∏–∫–ª–∏–∫–∞–≤ –∫–æ–º–∞–Ω–¥—É. –Ø–∫—â–æ ID –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É
    `ADMIN_IDS` –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º—É—î
    –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.
    """
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            logger.warning(f"–í—ñ–¥–º–æ–≤–∞ —É –Ω–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—ñ –¥–ª—è {user_id}.")
            message = await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–º–æ–≤—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            schedule_message_deletion(message, context, 30)
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

async def delete_message_callback(context: ContextTypes.DEFAULT_TYPE):
    """
    Callback-—Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è `JobQueue` –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    
    –û—Ç—Ä–∏–º—É—î `chat_id` —Ç–∞ `message_id` —ñ–∑ –¥–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω–Ω—è (`context.job.data`)
    —ñ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    try:
        chat_id = context.job.data["chat_id"]
        message_id = context.job.data["message_id"]
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –≤ —á–∞—Ç—ñ {chat_id}")
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {context.job.data.get('message_id')} –≤ —á–∞—Ç—ñ {context.job.data.get('chat_id')}: {e}")

def schedule_message_deletion(message: Message, context: ContextTypes.DEFAULT_TYPE, delay_seconds: int = 20 * 60):
    """
    –ü–ª–∞–Ω—É—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–∫–∞–∑–∞–Ω–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É.
    
    –°—Ç–≤–æ—Ä—é—î —É–Ω—ñ–∫–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ `JobQueue` –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    –Ø–∫—â–æ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î –∑–∞–≤–¥–∞–Ω–Ω—è (–Ω–∞–ø—Ä., –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è),
    —Å—Ç–∞—Ä–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤.
    –¶–µ –¥–æ–∑–≤–æ–ª—è—î —Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Ç —á–∏—Å—Ç–∏–º –≤—ñ–¥ —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
    
    Args:
        message: –û–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏.
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–æ–±–Ω–∏–∫–∞.
        delay_seconds: –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
    """
    if message and context.job_queue:
        job_name = f"delete_{message.chat_id}_{message.message_id}"
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–≤–¥–∞–Ω—å –∑ —Ç–∏–º —Å–∞–º–∏–º —ñ–º–µ–Ω–µ–º –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è
        for job in context.job_queue.get_jobs_by_name(job_name):
            job.schedule_removal()
            
        context.job_queue.run_once(
            delete_message_callback,
            delay_seconds,
            data={"chat_id": message.chat_id, "message_id": message.message_id},
            name=job_name
        )

async def get_fact() -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç—Ä–∏–º—É—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç –∑ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ API.
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö HTTP-–∑–∞–ø–∏—Ç—ñ–≤.
    –ú–∞—î –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É.
    """
    try:
        async with AsyncClient() as client:
            # –ó–∞–ø–∏—Ç –¥–æ API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–∫—Ç—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
            response = await client.get("https://uselessfacts.jsph.pl/api/v2/facts/random?language=uk")
            response.raise_for_status() # –í–∏–∫–∏–Ω–µ –≤–∏–Ω—è—Ç–æ–∫ –¥–ª—è –∫–æ–¥—ñ–≤ 4xx/5xx
            fact = response.json().get("text", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–∫—Ç. üò•")
    except (RequestError, JSONDecodeError) as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–∞–∫—Ç—É: {e}")
        fact = "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–∞–∫—Ç—É."
    return fact 