# -*- coding: utf-8 -*-
"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ (CallbackQueryHandler).

–¶–µ–π –º–æ–¥—É–ª—å –º—ñ—Å—Ç–∏—Ç—å –ª–æ–≥—ñ–∫—É, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
–∑ inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞–º–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `callback_data` –¥–æ–∑–≤–æ–ª—è—î —Ç–æ—á–Ω–æ
–≤–∏–∑–Ω–∞—á–∏—Ç–∏, —è–∫–∞ –∫–Ω–æ–ø–∫–∞ –±—É–ª–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞.
"""

import logging
from datetime import datetime, timedelta
import pytz

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from data_manager import users_data, group_chats_data, save_users_data, save_group_chat_data, schedule_data
from schedule_logic import get_day_schedule, format_schedule_text, get_current_week, get_user_group, is_group_chat, get_next_lesson
from keyboards import (
    quick_nav_keyboard, tomorrow_nav_keyboard, no_more_lessons_keyboard, 
    get_main_menu_keyboard, get_reminders_keyboard
)
from handlers.commands import (
    me_command, reminders_command, schedule_command, 
    set_group_schedule_command, group_info_command, week_command, today_command, tomorrow_command
)
from handlers.utils import get_fact, schedule_message_deletion
from handlers.conversations import game_start
from config import DAYS_UA, LESSON_TIMES

logger = logging.getLogger(__name__)


async def schedule_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –¥–Ω—è —Ç–∏–∂–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ä–æ–∑–∫–ª–∞–¥—É.
    
    –ü–∞—Ä—Å–∏—Ç—å `callback_data` (–Ω–∞–ø—Ä., "schedule_day_–ø–æ–Ω–µ–¥—ñ–ª–æ–∫"),
    –≤–∏–∑–Ω–∞—á–∞—î –∑–∞–ø–∏—Ç—É–≤–∞–Ω–∏–π –¥–µ–Ω—å, –æ—Ç—Ä–∏–º—É—î –¥–ª—è –Ω—å–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥ —ñ –æ–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    query = update.callback_query
    await query.answer()

    day_part = query.data.replace("schedule_", "")
    user_id = str(query.from_user.id)
    chat_id = str(query.message.chat.id)
    user_group = get_user_group(user_id, chat_id)

    if not user_group:
        await query.edit_message_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≥—Ä—É–ø—É.")
        # –¢—É—Ç –Ω–µ –ø–ª–∞–Ω—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –±–æ —Ü–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, —ñ —Å—Ç–∞—Ä–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –º–æ–∂–µ —ñ—Å–Ω—É–≤–∞—Ç–∏.
        return

    day_name = None
    target_date = datetime.now()

    if day_part == "today":
        day_name = DAYS_UA.get(target_date.weekday())
    elif day_part == "tomorrow":
        target_date = datetime.now() + timedelta(days=1)
        day_name = DAYS_UA.get(target_date.weekday())
    else:
        day_name = day_part.replace("day_", "")
    
    week = get_current_week(target_date)

    if not day_name or day_name not in schedule_data.get("groups", {}).get(user_group, {}).get("schedule", {}):
        await query.edit_message_text(f"üìÖ –ù–∞ {day_name.capitalize()} –ø–∞—Ä –Ω–µ–º–∞—î! –í—ñ–¥–ø–æ—á–∏–≤–∞–π üòä", reply_markup=quick_nav_keyboard)
        return

    lessons = get_day_schedule(user_group, day_name, week)
    schedule_text = format_schedule_text(user_group, day_name, lessons, week)

    await query.edit_message_text(
        text=schedule_text,
        reply_markup=quick_nav_keyboard,
        parse_mode='Markdown'
    )
    # –Ø–≤–Ω–æ –Ω–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ schedule_message_deletion, –æ—Å–∫—ñ–ª—å–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 
    # –Ω–µ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ, —ñ —Ç–∞–π–º–µ—Ä –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–¥–æ–≤–∂—É—î –¥—ñ—è—Ç–∏.


async def reminder_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–ø–æ–≤—ñ—â–µ–Ω—å.
    
    –ó–º—ñ–Ω—é—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (`daily_reminder`, `lesson_notifications`)
    —É `users_data` —ñ –æ–Ω–æ–≤–ª—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∑–º—ñ–Ω–∏.
    """
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    data = query.data

    if user_id not in users_data:
        users_data[user_id] = {}

    # –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    if data == "toggle_daily_reminder":
        current_setting = users_data[user_id].get("daily_reminder", False)
        users_data[user_id]["daily_reminder"] = not current_setting
        save_users_data()
    elif data == "toggle_lesson_notifications":
        current_setting = users_data[user_id].get("lesson_notifications", True)
        users_data[user_id]["lesson_notifications"] = not current_setting
        save_users_data()
    elif data == "disable_reminders":
        users_data[user_id]["reminder_time"] = None
        users_data[user_id]["daily_reminder"] = False
        users_data[user_id]["lesson_notifications"] = False
        save_users_data()

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    reply_markup = get_reminders_keyboard(user_id)
    await query.edit_message_text("‚öôÔ∏è *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å*", reply_markup=reply_markup, parse_mode='Markdown')


async def group_schedule_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –≥—Ä—É–ø–∏ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –≤ –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ.
    
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç—É.
    """
    query = update.callback_query
    await query.answer()

    _, group, chat_id = query.data.split("_")
    
    if chat_id not in group_chats_data:
        group_chats_data[chat_id] = {}

    group_chats_data[chat_id]["default_group"] = group
    save_group_chat_data()

    text = f"‚úÖ –†–æ–∑–∫–ª–∞–¥ –¥–ª—è –≥—Ä—É–ø–∏ *{group}* –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É."
    keyboard = [[InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)


async def quick_action_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è "—à–≤–∏–¥–∫–∏—Ö –¥—ñ–π" (–∫–Ω–æ–ø–∫–∏ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º 'quick_').
    
    –¶–µ–π –ø—ñ–¥—Ö—ñ–¥ (–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä) –¥–æ–∑–≤–æ–ª—è—î —É–Ω–∏–∫–Ω—É—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∑–ª—ñ—á—ñ –æ–∫—Ä–µ–º–∏—Ö
    –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–Ω–æ–ø–∫–∏. –ù–∞—Ç–æ–º—ñ—Å—Ç—å, –≤—ñ–Ω –∞–Ω–∞–ª—ñ–∑—É—î `callback_data`
    —ñ –¥–µ–ª–µ–≥—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó (—á–∞—Å—Ç–æ –∑ `from_callback=True`).
    """
    query = update.callback_query
    await query.answer()

    action = query.data

    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
    if action == "quick_today":
        await today_command(update, context, from_callback=True)
    elif action == "quick_tomorrow":
        await tomorrow_command(update, context, from_callback=True)
    elif action == "quick_week":
        await week_command(update, context, from_callback=True)
    elif action == "quick_schedule":
        await schedule_command(update, context, from_callback=True)
    elif action == "quick_reminders":
        await reminders_command(update, context, from_callback=True)
    elif action == "quick_me":
        await me_command(update, context, from_callback=True)
    elif action == "quick_fact":
        fact = await get_fact()
        keyboard = [
            [InlineKeyboardButton("üé≤ –Ü–Ω—à–∏–π —Ñ–∞–∫—Ç", callback_data="quick_fact")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="show_menu")]
        ]
        await query.edit_message_text(f"üß† *–¶—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç:*\n\n{fact}", reply_markup=InlineKeyboardMarkup(keyboard))
    elif action == "quick_next":
        user_group = get_user_group(str(query.from_user.id), str(query.message.chat.id) if is_group_chat(update) else None)
        if not user_group:
            await query.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≥—Ä—É–ø—É.", show_alert=True)
            return

        next_lesson = get_next_lesson(user_group)
        
        if next_lesson:
            time_start, time_end = LESSON_TIMES.get(next_lesson['pair'], ("??:??", "??:??"))
            text = (f"‚è∞ *–ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞:*\n\n"
                    f"üïê –ß–∞—Å: {time_start} - {time_end}\n"
                    f"üìö –ü—Ä–µ–¥–º–µ—Ç: {next_lesson['name']}\n"
                    f"üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á: {next_lesson.get('teacher', 'N/A')}\n"
                    f"üè† –ö–∞–±—ñ–Ω–µ—Ç: {next_lesson.get('room', 'N/A')}")
            await query.edit_message_text(text, reply_markup=tomorrow_nav_keyboard, parse_mode='Markdown')
        else:
            await query.edit_message_text("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ –±—ñ–ª—å—à–µ –ø–∞—Ä –Ω–µ–º–∞—î! üéâ", reply_markup=no_more_lessons_keyboard, parse_mode='Markdown')
    # –Ü–Ω—à—ñ —à–≤–∏–¥–∫—ñ –¥—ñ—ó, —â–æ –Ω–µ —Ä–µ–¥–∞–≥—É—é—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å –Ω–æ–≤–µ
    elif action == "quick_game":
        await game_start(update, context)
    elif action == "quick_setgroup":
        message = await query.message.reply_text("‚öôÔ∏è –î–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /setgroup.")
        schedule_message_deletion(message, context, 60)


async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é" –∞–±–æ "–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é".
    
    –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –æ–Ω–æ–≤–ª—é—é—á–∏ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    chat_id = str(query.message.chat.id)
    is_group = query.message.chat.type in ['group', 'supergroup']

    if is_group:
        default_group = group_chats_data.get(chat_id, {}).get("default_group")
        menu_text = f"üéØ *–ú–µ–Ω—é –≥—Ä—É–ø–∏*\nüë• –ì—Ä—É–ø–∞: *{default_group}*" if default_group else "üéØ *–ú–µ–Ω—é –≥—Ä—É–ø–∏*\n‚ö†Ô∏è –†–æ–∑–∫–ª–∞–¥ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    else:
        user_group = users_data.get(user_id, {}).get("group")
        menu_text = f"üéØ *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*\nüë§ –ì—Ä—É–ø–∞: *{user_group}*" if user_group else "üéØ *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*\n‚ö†Ô∏è –ì—Ä—É–ø–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    reply_markup = get_main_menu_keyboard(user_id, chat_id, is_group)
    await query.edit_message_text(
        text=menu_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )