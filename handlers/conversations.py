# -*- coding: utf-8 -*-
"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤ (ConversationHandler).

–¶–µ–π –º–æ–¥—É–ª—å —Ä–µ–∞–ª—ñ–∑—É—î –ø–æ–∫—Ä–æ–∫–æ–≤—ñ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º,
—Ç–∞–∫—ñ —è–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏, –≥—Ä–∞ –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω—å.
–ö–æ–∂–µ–Ω –¥—ñ–∞–ª–æ–≥ ‚Äî —Ü–µ —Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç –∑—ñ —Å–≤–æ—ó–º–∏ —Å—Ç–∞–Ω–∞–º–∏ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏.
"""

import logging
import random
from datetime import datetime
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from data_manager import users_data, schedule_data, save_users_data
from keyboards import get_admin_group_selection_keyboard
from handlers.utils import schedule_message_deletion

logger = logging.getLogger(__name__)

# --- –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –¥—ñ–∞–ª–æ–≥—ñ–≤ ---
# –ö–æ–∂–µ–Ω —Å—Ç–∞–Ω - —Ü–µ –ø—Ä–æ—Å—Ç–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ.
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `range` - –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏ —ó—Ö —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å.
CHOOSING_GROUP, GUESSING_NUMBER, SETTING_REMINDER_TIME = range(3)

# --- –î—ñ–∞–ª–æ–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏ ---

async def set_group_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ—á–∏–Ω–∞—î –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏.
    
    –ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –≥—Ä—É–ø–∞–º–∏.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥—ñ–∞–ª–æ–≥ —É —Å—Ç–∞–Ω CHOOSING_GROUP.
    """
    if not schedule_data.get("groups", {}):
        message = await update.message.reply_text("–ù–∞ –∂–∞–ª—å, –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø.")
        schedule_message_deletion(message, context, 60)
        return ConversationHandler.END

    groups = list(schedule_data.get("groups", {}).keys())
    keyboard = []
    # –†–æ–∑–±–∏–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ –¥–≤—ñ –≤ —Ä—è–¥—É
    for i in range(0, len(groups), 2):
        row = [InlineKeyboardButton(group, callback_data=f"conv_group_{group}") for group in groups[i:i+2]]
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="conv_cancel")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —è–∫ –∫–æ–º–∞–Ω–¥–∏, —Ç–∞–∫ —ñ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É
    if update.callback_query:
        message = await update.callback_query.message.edit_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø—É:", reply_markup=reply_markup)
    else:
        message = await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø—É:", reply_markup=reply_markup)
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 20 —Ö–≤–∏–ª–∏–Ω
    schedule_message_deletion(message, context)
    return CHOOSING_GROUP


async def group_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –≥—Ä—É–ø–∏, –∑–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î –¥—ñ–∞–ª–æ–≥.
    
    –ê–∫—Ç–∏–≤—É—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑ –Ω–∞–∑–≤–æ—é –≥—Ä—É–ø–∏.
    """
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    # –í–∏–¥–æ–±—É—Ç—Ç—è –Ω–∞–∑–≤–∏ –≥—Ä—É–ø–∏ –∑ `callback_data` (–Ω–∞–ø—Ä., "conv_group_–ù–¢-24-01")
    chosen_group = query.data.split('_')[-1]
    
    keyboard = [[InlineKeyboardButton("üéØ –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é", callback_data="show_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if chosen_group in schedule_data.get("groups", {}):
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_id not in users_data:
             users_data[user_id] = {"first_name": query.from_user.first_name, "username": query.from_user.username}
        users_data[user_id]["group"] = chosen_group
        save_users_data()
        message = await query.edit_message_text(f"–ß—É–¥–æ–≤–æ! –¢–≤–æ—é –≥—Ä—É–ø—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫ *{chosen_group}*.", reply_markup=reply_markup, parse_mode='Markdown')
    else:
        message = await query.edit_message_text("–¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", reply_markup=reply_markup)
    
    schedule_message_deletion(message, context, 600)
    return ConversationHandler.END


# --- –î—ñ–∞–ª–æ–≥ –≥—Ä–∏ "–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ" ---

async def game_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ—á–∏–Ω–∞—î –≥—Ä—É '–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ'.
    
    –ó–∞–≥–∞–¥—É—î —á–∏—Å–ª–æ, –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ –≤ `context.user_data` —ñ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥—ñ–∞–ª–æ–≥
    —É —Å—Ç–∞–Ω GUESSING_NUMBER. `user_data` - —Ü–µ —Å–ª–æ–≤–Ω–∏–∫, —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ
    –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.
    """
    keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –≥—Ä—É", callback_data="conv_cancel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        message = await update.callback_query.message.edit_text(
            "–Ø –∑–∞–≥–∞–¥–∞–≤ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100. –°–ø—Ä–æ–±—É–π –≤–≥–∞–¥–∞—Ç–∏!",
            reply_markup=reply_markup
        )
    else:
        message = await update.message.reply_text(
            "–Ø –∑–∞–≥–∞–¥–∞–≤ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100. –°–ø—Ä–æ–±—É–π –≤–≥–∞–¥–∞—Ç–∏!",
            reply_markup=reply_markup
        )
    schedule_message_deletion(message, context)

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –≥—Ä–∏
    context.user_data['secret_number'] = random.randint(1, 100)
    context.user_data['attempts'] = 0
    return GUESSING_NUMBER


async def game_guess(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î —Å–ø—Ä–æ–±—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≥–∞–¥–∞—Ç–∏ —á–∏—Å–ª–æ.
    
    –ó–∞–ª–∏—à–∞—î—Ç—å—Å—è —É —Å—Ç–∞–Ω—ñ GUESSING_NUMBER –¥–æ—Ç–∏, –¥–æ–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–≥–∞–¥–∞—î —á–∏—Å–ª–æ.
    –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª—é—î –Ω–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î –¥—ñ–∞–ª–æ–≥.
    """
    user_id = str(update.effective_user.id)
    try:
        guess = int(update.message.text)
        context.user_data['attempts'] += 1
        secret_number = context.user_data['secret_number']

        if guess < secret_number:
            message = await update.message.reply_text("–ë—ñ–ª—å—à–µ!")
            schedule_message_deletion(message, context, 15)
            return GUESSING_NUMBER # –ó–∞–ª–∏—à–∞—î–º–æ—Å—å —É —Ç–æ–º—É –∂ —Å—Ç–∞–Ω—ñ
        elif guess > secret_number:
            message = await update.message.reply_text("–ú–µ–Ω—à–µ!")
            schedule_message_deletion(message, context, 15)
            return GUESSING_NUMBER # –ó–∞–ª–∏—à–∞—î–º–æ—Å—å —É —Ç–æ–º—É –∂ —Å—Ç–∞–Ω—ñ
        else:
            # --- –£—Å–ø—ñ—à–Ω–µ –≤–≥–∞–¥—É–≤–∞–Ω–Ω—è ---
            attempts = context.user_data['attempts']
            best_score = users_data.get(user_id, {}).get("best_score")
            reply_text = f"üéâ –í—ñ—Ç–∞—é! –¢–∏ –≤–≥–∞–¥–∞–≤ —á–∏—Å–ª–æ {secret_number} –∑–∞ {attempts} —Å–ø—Ä–æ–±!"
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∫–æ—Ä–¥—É
            if best_score is None or attempts < best_score:
                users_data[user_id]["best_score"] = attempts
                save_users_data()
                reply_text += "\n–¶–µ —Ç–≤—ñ–π –Ω–æ–≤–∏–π –Ω–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            
            keyboard = [
                [InlineKeyboardButton("üéÆ –ó—ñ–≥—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data="quick_game")],
                [InlineKeyboardButton("üéØ –ú–µ–Ω—é", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            message = await update.message.reply_text(reply_text, reply_markup=reply_markup)
            schedule_message_deletion(message, context)
            context.user_data.clear() # –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∏
            return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
    except (ValueError, KeyError):
        message = await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        schedule_message_deletion(message, context)
        return GUESSING_NUMBER


# --- –î—ñ–∞–ª–æ–≥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ---

async def set_reminder_time_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∏–Ω–∞—î –¥—ñ–∞–ª–æ–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å."""
    keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="conv_cancel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        message = await update.callback_query.message.edit_text(
            "–í–≤–µ–¥–∏ —á–∞—Å –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ *HH:MM* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 20:30):",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        message = await update.message.reply_text(
            "–í–≤–µ–¥–∏ —á–∞—Å –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ *HH:MM* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 20:30):",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    schedule_message_deletion(message, context)
    return SETTING_REMINDER_TIME


async def reminder_time_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–∏–π —á–∞—Å, –≤–∞–ª—ñ–¥—É—î –π–æ–≥–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î.
    
    –Ø–∫—â–æ —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É –Ω–µ–≤—ñ—Ä–Ω–∏–π, –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ –π–æ–≥–æ –∑–Ω–æ–≤—É,
    –∑–∞–ª–∏—à–∞—é—á–∏—Å—å —É —Ç–æ–º—É –∂ —Å—Ç–∞–Ω—ñ.
    """
    user_id = str(update.effective_user.id)
    time_text = update.message.text
    try:
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É —á–∞—Å—É HH:MM
        datetime.strptime(time_text, "%H:%M")
        if user_id not in users_data:
            users_data[user_id] = {}
        users_data[user_id]["reminder_time"] = time_text
        save_users_data()
        
        keyboard = [[InlineKeyboardButton("üîî –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å", callback_data="quick_reminders")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = await update.message.reply_text(f"‚úÖ –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_text}!", reply_markup=reply_markup)
        schedule_message_deletion(message, context)
    except ValueError:
        message = await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ *HH:MM*", parse_mode='Markdown')
        schedule_message_deletion(message, context, 60)
        return SETTING_REMINDER_TIME # –ü—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∞—Å –∑–Ω–æ–≤—É
        
    return ConversationHandler.END


# --- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—ñ–≤ ---

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—É–¥—å-—è–∫–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.
    
    –ü—Ä–∏–≤'—è–∑–∞–Ω–∞ –¥–æ –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —É –≤—Å—ñ—Ö –¥—ñ–∞–ª–æ–≥–∞—Ö.
    –û—á–∏—â—É—î `user_data` —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î –¥—ñ–∞–ª–æ–≥.
    """
    query = update.callback_query
    keyboard = [[InlineKeyboardButton("üéØ –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é", callback_data="show_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        await query.answer()
        message = await query.edit_message_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=reply_markup)
    else:
        message = await update.message.reply_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=reply_markup)
    
    schedule_message_deletion(message, context, 60)
    context.user_data.clear()
    return ConversationHandler.END 